version: "3"

# PostgreSQL Extensions Installation Taskfile
# Supports APT packages, PGXN client, GitHub releases, and source compilation

vars:
  # PostgreSQL version for extension compatibility
  PG_MAJOR: 17
  PG_VERSION: "{{.PG_MAJOR}}"

  # Architecture detection
  ARCH:
    sh: dpkg --print-architecture

  # Extension directories
  LIB_DIR: /usr/lib/postgresql/{{.PG_VERSION}}/lib
  SHARE_DIR: /usr/share/postgresql/{{.PG_VERSION}}/extension

  # Build dependencies
  BUILD_DEPS: build-essential postgresql-server-dev-{{.PG_VERSION}} libssl-dev libkrb5-dev libsodium-dev libcurl4-openssl-dev pkg-config cmake git curl wget

tasks:
  # Install all extensions
  install-all:
    desc: Install all PostgreSQL extensions
    cmds:
      - task: install-build-deps
      - task: install-pgxn-client
      - task: install-apt-extensions
      - task: install-pgxn-extensions
      - task: install-github-extensions
      - task: install-source-extensions
      - task: cleanup

  # Install build dependencies
  install-build-deps:
    desc: Install build dependencies for extension compilation
    cmds:
      - apt-get update --allow-insecure-repositories
      - apt-get install -y --no-install-recommends {{.BUILD_DEPS}}

  # Install PGXN client
  install-pgxn-client:
    desc: Install PGXN client for extension installation
    cmds:
      - apt-get update --allow-insecure-repositories
      - apt-get install -y --no-install-recommends pipx
      - pipx install pgxnclient
      - pipx ensurepath

  # PGXN-based extensions (0 extensions - moved to source)
  install-pgxn-extensions:
    desc: Install extensions available via PGXN
    cmds:
      - echo "All PGXN extensions moved to source-based installation"

  # GitHub releases (.deb packages)
  install-github-extensions:
    desc: Install extensions from GitHub releases
    cmds:
      - task: install-pg-jsonschema-github

  install-pg-jsonschema-github:
    desc: Install pg_jsonschema from GitHub .deb package
    vars:
      VERSION: 0.3.3
      DEB_URL: https://github.com/supabase/pg_jsonschema/releases/download/v{{.VERSION}}/pg_jsonschema-v{{.VERSION}}-pg{{.PG_VERSION}}-{{.ARCH}}-linux-gnu.deb
    cmds:
      - wget -O /tmp/pg_jsonschema.deb {{.DEB_URL}}
      - dpkg -i /tmp/pg_jsonschema.deb
      - rm -f /tmp/pg_jsonschema.deb

  # Source-based extensions (8 extensions)
  install-source-extensions:
    desc: Install extensions from source code
    cmds:
      - task: install-pgjwt-source
      - task: install-pg-stat-monitor-source
      - task: install-pg-hashids-source
      - task: install-safeupdate-source
      - task: install-pgsodium-source
      - task: install-pg-plan-filter-source
      - task: install-pg-net-source
      - task: install-index-advisor-source

  install-pgjwt-source:
    desc: Install pgjwt extension from source
    vars:
      BRANCH: master
    cmds:
      - |
        cd /tmp
        wget https://github.com/michelp/pgjwt/archive/{{.BRANCH}}.tar.gz -O pgjwt-{{.BRANCH}}.tar.gz
        tar -xzf pgjwt-{{.BRANCH}}.tar.gz
        cd pgjwt-{{.BRANCH}}
        make USE_PGXS=1 PG_CONFIG=/usr/lib/postgresql/{{.PG_VERSION}}/bin/pg_config
        make USE_PGXS=1 PG_CONFIG=/usr/lib/postgresql/{{.PG_VERSION}}/bin/pg_config install
        cd .. && rm -rf pgjwt-*

  install-pg-stat-monitor-source:
    desc: Install pg_stat_monitor extension from source
    vars:
      VERSION: 2.2.0
    cmds:
      - |
        cd /tmp
        wget https://github.com/percona/pg_stat_monitor/archive/{{.VERSION}}.tar.gz -O pg_stat_monitor-{{.VERSION}}.tar.gz
        tar -xzf pg_stat_monitor-{{.VERSION}}.tar.gz
        cd pg_stat_monitor-{{.VERSION}}
        make USE_PGXS=1 PG_CONFIG=/usr/lib/postgresql/{{.PG_VERSION}}/bin/pg_config
        make USE_PGXS=1 PG_CONFIG=/usr/lib/postgresql/{{.PG_VERSION}}/bin/pg_config install
        cd .. && rm -rf pg_stat_monitor-*

  install-pg-hashids-source:
    desc: Install pg_hashids extension from source
    vars:
      COMMIT: cd0e1b31d52b394a0df64079406a14a4f7387cd6
    cmds:
      - |
        cd /tmp
        wget https://github.com/iCyberon/pg_hashids/archive/{{.COMMIT}}.tar.gz -O pg_hashids.tar.gz
        tar -xzf pg_hashids.tar.gz
        cd pg_hashids-{{.COMMIT}}
        make USE_PGXS=1 PG_CONFIG=/usr/lib/postgresql/{{.PG_VERSION}}/bin/pg_config
        make USE_PGXS=1 PG_CONFIG=/usr/lib/postgresql/{{.PG_VERSION}}/bin/pg_config install
        cd .. && rm -rf pg_hashids-*

  install-safeupdate-source:
    desc: Install safeupdate extension from source
    vars:
      VERSION: 1.4
    cmds:
      - |
        cd /tmp
        wget https://github.com/eradman/pg-safeupdate/archive/{{.VERSION}}.tar.gz -O pg-safeupdate-{{.VERSION}}.tar.gz
        tar -xzf pg-safeupdate-{{.VERSION}}.tar.gz
        cd pg-safeupdate-{{.VERSION}}
        make USE_PGXS=1 PG_CONFIG=/usr/lib/postgresql/{{.PG_VERSION}}/bin/pg_config
        make USE_PGXS=1 PG_CONFIG=/usr/lib/postgresql/{{.PG_VERSION}}/bin/pg_config install
        cd .. && rm -rf pg-safeupdate-*

  install-pgsodium-source:
    desc: Install pgsodium extension from source
    vars:
      VERSION: 3.1.9
    cmds:
      # Install pgsodium (libsodium-dev is already installed as BUILD_DEPS)
      - |
        cd /tmp
        wget https://github.com/michelp/pgsodium/archive/v{{.VERSION}}.tar.gz -O pgsodium-{{.VERSION}}.tar.gz
        tar -xzf pgsodium-{{.VERSION}}.tar.gz
        cd pgsodium-{{.VERSION}}
        make USE_PGXS=1 PG_CONFIG=/usr/lib/postgresql/{{.PG_VERSION}}/bin/pg_config
        make USE_PGXS=1 PG_CONFIG=/usr/lib/postgresql/{{.PG_VERSION}}/bin/pg_config install
        cd .. && rm -rf pgsodium-*

  install-pg-plan-filter-source:
    desc: Install pg_plan_filter extension from source
    vars:
      COMMIT: 5081a7b5cb890876e67d8e7486b6a64c38c9a492
    cmds:
      - |
        cd /tmp
        wget https://github.com/pgexperts/pg_plan_filter/archive/{{.COMMIT}}.tar.gz -O pg_plan_filter.tar.gz
        tar -xzf pg_plan_filter.tar.gz
        cd pg_plan_filter-{{.COMMIT}}
        make USE_PGXS=1 PG_CONFIG=/usr/lib/postgresql/{{.PG_VERSION}}/bin/pg_config
        make USE_PGXS=1 PG_CONFIG=/usr/lib/postgresql/{{.PG_VERSION}}/bin/pg_config install
        cd .. && rm -rf pg_plan_filter-*

  install-pg-net-source:
    desc: Install pg_net extension from source
    vars:
      VERSION: 0.13.0
    cmds:
      - |
        cd /tmp
        wget https://github.com/supabase/pg_net/archive/v{{.VERSION}}.tar.gz -O pg_net-{{.VERSION}}.tar.gz
        tar -xzf pg_net-{{.VERSION}}.tar.gz
        cd pg_net-{{.VERSION}}
        make USE_PGXS=1 PG_CONFIG=/usr/lib/postgresql/{{.PG_VERSION}}/bin/pg_config
        make USE_PGXS=1 PG_CONFIG=/usr/lib/postgresql/{{.PG_VERSION}}/bin/pg_config install
        cd .. && rm -rf pg_net-*

  install-index-advisor-source:
    desc: Install index_advisor extension from source
    vars:
      VERSION: 0.2.0
    cmds:
      - |
        cd /tmp
        wget https://github.com/supabase/index_advisor/archive/v{{.VERSION}}.tar.gz -O index_advisor-{{.VERSION}}.tar.gz
        tar -xzf index_advisor-{{.VERSION}}.tar.gz
        cd index_advisor-{{.VERSION}}
        make USE_PGXS=1 PG_CONFIG=/usr/lib/postgresql/{{.PG_VERSION}}/bin/pg_config
        make USE_PGXS=1 PG_CONFIG=/usr/lib/postgresql/{{.PG_VERSION}}/bin/pg_config install
        cd .. && rm -rf index_advisor-*

  # Cleanup tasks
  cleanup:
    desc: Clean up build dependencies and temporary files
    cmds:
      - apt-get remove -y --purge {{.BUILD_DEPS}}
      - apt-get autoremove -y --purge
      - apt-get clean
      - rm -rf /var/lib/apt/lists/*
      - rm -rf /tmp/*

  # Verification tasks
  verify-extensions:
    desc: Verify all extensions are installed correctly
    cmds:
      - task: list-extensions
      - task: check-extension-files

  list-extensions:
    desc: List all installed extension files
    cmds:
      - echo "=== Extension Libraries (.so files) ==="
      - ls -la {{.LIB_DIR}}/ | grep -E "\.(so)$" || true
      - echo "=== Extension SQL/Control files ==="
      - ls -la {{.SHARE_DIR}}/ | grep -E "\.(sql|control)$" || true

  check-extension-files:
    desc: Check if all expected extension files exist
    cmds:
      # Core extensions we expect to find
      - |
        echo "Checking for expected extension files..."
        EXTENSIONS="pgvector pgaudit pg_repack pg_cron wal2json hypopg pgjwt pg_stat_monitor pg_hashids safeupdate pg_jsonschema pgsodium pg_plan_filter pg_net index_advisor"

        for ext in $EXTENSIONS; do
          if ls {{.SHARE_DIR}}/${ext}*.control >/dev/null 2>&1; then
            echo "✅ $ext control file found"
          else
            echo "❌ $ext control file missing"
          fi
        done

  # Individual extension verification
  test-extensions:
    desc: Test extensions can be loaded in PostgreSQL
    cmds:
      - |
        echo "Testing extension loading (requires running PostgreSQL)..."
        EXTENSIONS="pgvector pgaudit pg_repack pg_cron wal2json hypopg pgjwt pg_stat_monitor pg_hashids safeupdate pg_jsonschema pgsodium pg_plan_filter pg_net index_advisor"

        for ext in $EXTENSIONS; do
          if sudo -u postgres psql -d postgres -c "CREATE EXTENSION IF NOT EXISTS $ext;" >/dev/null 2>&1; then
            echo "✅ $ext loads successfully"
            sudo -u postgres psql -d postgres -c "DROP EXTENSION IF EXISTS $ext;" >/dev/null 2>&1
          else
            echo "❌ $ext failed to load"
          fi
        done
