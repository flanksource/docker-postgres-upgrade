// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package pkg

// Database connection configuration for PgBouncer
type DatabaseConfig struct {
	// Query to run on new connections
	ConnectQuery *string `json:"connect_query,omitempty" yaml:"connect_query,omitempty" mapstructure:"connect_query,omitempty"`

	// Database name
	Dbname *string `json:"dbname,omitempty" yaml:"dbname,omitempty" mapstructure:"dbname,omitempty"`

	// Database host
	Host string `json:"host,omitempty" yaml:"host,omitempty" mapstructure:"host,omitempty"`

	// Database password
	Password *string `json:"password,omitempty" yaml:"password,omitempty" mapstructure:"password,omitempty"`

	// Pool size for this database
	PoolSize *int `json:"pool_size,omitempty" yaml:"pool_size,omitempty" mapstructure:"pool_size,omitempty"`

	// Database port
	Port int `json:"port,omitempty" yaml:"port,omitempty" mapstructure:"port,omitempty"`

	// Database user
	User *string `json:"user,omitempty" yaml:"user,omitempty" mapstructure:"user,omitempty"`
}

// PGAudit extension configuration for PostgreSQL audit logging
type PGAuditConf struct {
	// Specifies whether audit logging should be filtered using role-based access
	// control
	FilterUsingRole PGAuditConfFilterUsingRole `json:"filter_using_role,omitempty" yaml:"filter_using_role,omitempty" mapstructure:"filter_using_role,omitempty"`

	// Specifies which classes of statements will be logged by session audit logging
	Log PGAuditConfLog `json:"log,omitempty" yaml:"log,omitempty" mapstructure:"log,omitempty"`

	// Specifies that session logging should be enabled in the case where all
	// relations in a statement are in pg_catalog
	LogCatalog PGAuditConfLogCatalog `json:"log_catalog,omitempty" yaml:"log_catalog,omitempty" mapstructure:"log_catalog,omitempty"`

	// Specifies whether log messages will be visible to a client process
	LogClient PGAuditConfLogClient `json:"log_client,omitempty" yaml:"log_client,omitempty" mapstructure:"log_client,omitempty"`

	// Specifies the log level that will be used for log entries
	LogLevel PGAuditConfLogLevel `json:"log_level,omitempty" yaml:"log_level,omitempty" mapstructure:"log_level,omitempty"`

	// Specifies that audit logging should include the parameters that were passed
	// with the statement
	LogParameter PGAuditConfLogParameter `json:"log_parameter,omitempty" yaml:"log_parameter,omitempty" mapstructure:"log_parameter,omitempty"`

	// Sets the maximum size of a parameter value that will be logged
	LogParameterMaxSize string `json:"log_parameter_max_size,omitempty" yaml:"log_parameter_max_size,omitempty" mapstructure:"log_parameter_max_size,omitempty"`

	// Specifies whether session audit logging should create a separate log entry for
	// each relation referenced in a SELECT or DML statement
	LogRelation PGAuditConfLogRelation `json:"log_relation,omitempty" yaml:"log_relation,omitempty" mapstructure:"log_relation,omitempty"`

	// Specifies whether logging will include the statement text and parameters (if
	// enabled)
	LogStatement PGAuditConfLogStatement `json:"log_statement,omitempty" yaml:"log_statement,omitempty" mapstructure:"log_statement,omitempty"`

	// Specifies whether logging will include the statement text and parameters (if
	// enabled) with the first log entry for a statement/substatement combination or
	// with every log entry
	LogStatementOnce PGAuditConfLogStatementOnce `json:"log_statement_once,omitempty" yaml:"log_statement_once,omitempty" mapstructure:"log_statement_once,omitempty"`

	// Sets the maximum stack depth for audit logging to prevent infinite recursion
	MaxStackDepth *string `json:"max_stack_depth,omitempty" yaml:"max_stack_depth,omitempty" mapstructure:"max_stack_depth,omitempty"`

	// Specifies which classes of statements will be logged by object audit logging
	ObjectLog PGAuditConfObjectLog `json:"object_log,omitempty" yaml:"object_log,omitempty" mapstructure:"object_log,omitempty"`

	// Specifies that object logging should be enabled in the case where all relations
	// in a statement are in pg_catalog
	ObjectLogCatalog PGAuditConfObjectLogCatalog `json:"object_log_catalog,omitempty" yaml:"object_log_catalog,omitempty" mapstructure:"object_log_catalog,omitempty"`

	// Specifies the master role to use for object audit logging
	Role *string `json:"role,omitempty" yaml:"role,omitempty" mapstructure:"role,omitempty"`

	// Specifies whether the statement name, if provided, should be included in the
	// session log
	SessionLogStatementName PGAuditConfSessionLogStatementName `json:"session_log_statement_name,omitempty" yaml:"session_log_statement_name,omitempty" mapstructure:"session_log_statement_name,omitempty"`
}

type PGAuditConfFilterUsingRole string

const PGAuditConfFilterUsingRoleOff PGAuditConfFilterUsingRole = "off"
const PGAuditConfFilterUsingRoleOn PGAuditConfFilterUsingRole = "on"

type PGAuditConfLog string

const PGAuditConfLogAll PGAuditConfLog = "all"

type PGAuditConfLogCatalog string

const PGAuditConfLogCatalogOff PGAuditConfLogCatalog = "off"
const PGAuditConfLogCatalogOn PGAuditConfLogCatalog = "on"

type PGAuditConfLogClient string

const PGAuditConfLogClientOff PGAuditConfLogClient = "off"
const PGAuditConfLogClientOn PGAuditConfLogClient = "on"
const PGAuditConfLogDdl PGAuditConfLog = "ddl"
const PGAuditConfLogFunction PGAuditConfLog = "function"

type PGAuditConfLogLevel string

const PGAuditConfLogLevelDebug1 PGAuditConfLogLevel = "debug1"
const PGAuditConfLogLevelDebug2 PGAuditConfLogLevel = "debug2"
const PGAuditConfLogLevelDebug3 PGAuditConfLogLevel = "debug3"
const PGAuditConfLogLevelDebug4 PGAuditConfLogLevel = "debug4"
const PGAuditConfLogLevelDebug5 PGAuditConfLogLevel = "debug5"
const PGAuditConfLogLevelInfo PGAuditConfLogLevel = "info"
const PGAuditConfLogLevelLog PGAuditConfLogLevel = "log"
const PGAuditConfLogLevelNotice PGAuditConfLogLevel = "notice"
const PGAuditConfLogLevelWarning PGAuditConfLogLevel = "warning"
const PGAuditConfLogMisc PGAuditConfLog = "misc"
const PGAuditConfLogMiscSet PGAuditConfLog = "misc_set"
const PGAuditConfLogNone PGAuditConfLog = "none"

type PGAuditConfLogParameter string

const PGAuditConfLogParameterOff PGAuditConfLogParameter = "off"
const PGAuditConfLogParameterOn PGAuditConfLogParameter = "on"
const PGAuditConfLogRead PGAuditConfLog = "read"

type PGAuditConfLogRelation string

const PGAuditConfLogRelationOff PGAuditConfLogRelation = "off"
const PGAuditConfLogRelationOn PGAuditConfLogRelation = "on"
const PGAuditConfLogRole PGAuditConfLog = "role"

type PGAuditConfLogStatement string

const PGAuditConfLogStatementOff PGAuditConfLogStatement = "off"
const PGAuditConfLogStatementOn PGAuditConfLogStatement = "on"

type PGAuditConfLogStatementOnce string

const PGAuditConfLogStatementOnceOff PGAuditConfLogStatementOnce = "off"
const PGAuditConfLogStatementOnceOn PGAuditConfLogStatementOnce = "on"
const PGAuditConfLogWrite PGAuditConfLog = "write"

type PGAuditConfObjectLog string

const PGAuditConfObjectLogAll PGAuditConfObjectLog = "all"

type PGAuditConfObjectLogCatalog string

const PGAuditConfObjectLogCatalogOff PGAuditConfObjectLogCatalog = "off"
const PGAuditConfObjectLogCatalogOn PGAuditConfObjectLogCatalog = "on"
const PGAuditConfObjectLogDdl PGAuditConfObjectLog = "ddl"
const PGAuditConfObjectLogFunction PGAuditConfObjectLog = "function"
const PGAuditConfObjectLogMisc PGAuditConfObjectLog = "misc"
const PGAuditConfObjectLogMiscSet PGAuditConfObjectLog = "misc_set"
const PGAuditConfObjectLogNone PGAuditConfObjectLog = "none"
const PGAuditConfObjectLogRead PGAuditConfObjectLog = "read"
const PGAuditConfObjectLogRole PGAuditConfObjectLog = "role"
const PGAuditConfObjectLogWrite PGAuditConfObjectLog = "write"

type PGAuditConfSessionLogStatementName string

const PGAuditConfSessionLogStatementNameOff PGAuditConfSessionLogStatementName = "off"
const PGAuditConfSessionLogStatementNameOn PGAuditConfSessionLogStatementName = "on"

// PgBouncer connection pooler configuration
type PgBouncerConf struct {
	// Administrative password for PgBouncer
	AdminPassword *string `json:"admin_password,omitempty" yaml:"admin_password,omitempty" mapstructure:"admin_password,omitempty"`

	// Administrative user for PgBouncer
	AdminUser *string `json:"admin_user,omitempty" yaml:"admin_user,omitempty" mapstructure:"admin_user,omitempty"`

	// Path to authentication file
	AuthFile string `json:"auth_file,omitempty" yaml:"auth_file,omitempty" mapstructure:"auth_file,omitempty"`

	// Query to authenticate users
	AuthQuery string `json:"auth_query,omitempty" yaml:"auth_query,omitempty" mapstructure:"auth_query,omitempty"`

	// Authentication type for PgBouncer
	AuthType PgBouncerConfAuthType `json:"auth_type,omitempty" yaml:"auth_type,omitempty" mapstructure:"auth_type,omitempty"`

	// Maximum idle time for client connections
	ClientIdleTimeout string `json:"client_idle_timeout,omitempty" yaml:"client_idle_timeout,omitempty" mapstructure:"client_idle_timeout,omitempty"`

	// Database connection configurations
	Databases map[string]DatabaseConfig `json:"databases,omitempty" yaml:"databases,omitempty" mapstructure:"databases,omitempty"`

	// Default pool size for databases
	DefaultPoolSize int `json:"default_pool_size,omitempty" yaml:"default_pool_size,omitempty" mapstructure:"default_pool_size,omitempty"`

	// Specifies the address to listen on
	ListenAddress string `json:"listen_address,omitempty" yaml:"listen_address,omitempty" mapstructure:"listen_address,omitempty"`

	// Specifies the port to listen on
	ListenPort int `json:"listen_port,omitempty" yaml:"listen_port,omitempty" mapstructure:"listen_port,omitempty"`

	// Maximum number of client connections allowed
	MaxClientConn int `json:"max_client_conn,omitempty" yaml:"max_client_conn,omitempty" mapstructure:"max_client_conn,omitempty"`

	// Minimum pool size
	MinPoolSize int `json:"min_pool_size,omitempty" yaml:"min_pool_size,omitempty" mapstructure:"min_pool_size,omitempty"`

	// Pooling mode to use
	PoolMode PgBouncerConfPoolMode `json:"pool_mode,omitempty" yaml:"pool_mode,omitempty" mapstructure:"pool_mode,omitempty"`

	// Query timeout
	QueryTimeout string `json:"query_timeout,omitempty" yaml:"query_timeout,omitempty" mapstructure:"query_timeout,omitempty"`

	// Reserved pool size
	ReservePoolSize *int `json:"reserve_pool_size,omitempty" yaml:"reserve_pool_size,omitempty" mapstructure:"reserve_pool_size,omitempty"`

	// Maximum idle time for server connections
	ServerIdleTimeout string `json:"server_idle_timeout,omitempty" yaml:"server_idle_timeout,omitempty" mapstructure:"server_idle_timeout,omitempty"`

	// Maximum lifetime of a server connection
	ServerLifetime string `json:"server_lifetime,omitempty" yaml:"server_lifetime,omitempty" mapstructure:"server_lifetime,omitempty"`

	// Query to run on server connection before returning to pool
	ServerResetQuery string `json:"server_reset_query,omitempty" yaml:"server_reset_query,omitempty" mapstructure:"server_reset_query,omitempty"`
}

type PgBouncerConfAuthType string

const PgBouncerConfAuthTypeAny PgBouncerConfAuthType = "any"
const PgBouncerConfAuthTypeCert PgBouncerConfAuthType = "cert"
const PgBouncerConfAuthTypeHba PgBouncerConfAuthType = "hba"
const PgBouncerConfAuthTypeMd5 PgBouncerConfAuthType = "md5"
const PgBouncerConfAuthTypePam PgBouncerConfAuthType = "pam"
const PgBouncerConfAuthTypePlain PgBouncerConfAuthType = "plain"
const PgBouncerConfAuthTypeScramSha256 PgBouncerConfAuthType = "scram-sha-256"
const PgBouncerConfAuthTypeTrust PgBouncerConfAuthType = "trust"

type PgBouncerConfPoolMode string

const PgBouncerConfPoolModeSession PgBouncerConfPoolMode = "session"
const PgBouncerConfPoolModeStatement PgBouncerConfPoolMode = "statement"
const PgBouncerConfPoolModeTransaction PgBouncerConfPoolMode = "transaction"

// PostgreSQL host-based authentication configuration
type PgHBAConf struct {
	// List of host-based authentication rules
	Rules []PgHBAConfRulesElem `json:"rules,omitempty" yaml:"rules,omitempty" mapstructure:"rules,omitempty"`
}

type PgHBAConfRulesElem struct {
	// Client IP address, hostname, or CIDR range
	Address *string `json:"address,omitempty" yaml:"address,omitempty" mapstructure:"address,omitempty"`

	// Database name or 'all'
	Database string `json:"database" yaml:"database" mapstructure:"database"`

	// Authentication method
	Method PgHBAConfRulesElemMethod `json:"method" yaml:"method" mapstructure:"method"`

	// Additional authentication options
	Options map[string]string `json:"options,omitempty" yaml:"options,omitempty" mapstructure:"options,omitempty"`

	// Connection type
	Type PgHBAConfRulesElemType `json:"type" yaml:"type" mapstructure:"type"`

	// Username or 'all'
	User string `json:"user" yaml:"user" mapstructure:"user"`
}

type PgHBAConfRulesElemMethod string

const PgHBAConfRulesElemMethodBsd PgHBAConfRulesElemMethod = "bsd"
const PgHBAConfRulesElemMethodCert PgHBAConfRulesElemMethod = "cert"
const PgHBAConfRulesElemMethodGss PgHBAConfRulesElemMethod = "gss"
const PgHBAConfRulesElemMethodIdent PgHBAConfRulesElemMethod = "ident"
const PgHBAConfRulesElemMethodLdap PgHBAConfRulesElemMethod = "ldap"
const PgHBAConfRulesElemMethodMd5 PgHBAConfRulesElemMethod = "md5"
const PgHBAConfRulesElemMethodPam PgHBAConfRulesElemMethod = "pam"
const PgHBAConfRulesElemMethodPassword PgHBAConfRulesElemMethod = "password"
const PgHBAConfRulesElemMethodPeer PgHBAConfRulesElemMethod = "peer"
const PgHBAConfRulesElemMethodRadius PgHBAConfRulesElemMethod = "radius"
const PgHBAConfRulesElemMethodReject PgHBAConfRulesElemMethod = "reject"
const PgHBAConfRulesElemMethodScramSha256 PgHBAConfRulesElemMethod = "scram-sha-256"
const PgHBAConfRulesElemMethodSspi PgHBAConfRulesElemMethod = "sspi"
const PgHBAConfRulesElemMethodTrust PgHBAConfRulesElemMethod = "trust"

type PgHBAConfRulesElemType string

const PgHBAConfRulesElemTypeHost PgHBAConfRulesElemType = "host"
const PgHBAConfRulesElemTypeHostgssenc PgHBAConfRulesElemType = "hostgssenc"
const PgHBAConfRulesElemTypeHostnogssenc PgHBAConfRulesElemType = "hostnogssenc"
const PgHBAConfRulesElemTypeHostnossl PgHBAConfRulesElemType = "hostnossl"
const PgHBAConfRulesElemTypeHostssl PgHBAConfRulesElemType = "hostssl"
const PgHBAConfRulesElemTypeLocal PgHBAConfRulesElemType = "local"

type PgconfigSchemaJson struct {
	// Pgaudit corresponds to the JSON schema field "pgaudit".
	Pgaudit *PGAuditConf `json:"pgaudit,omitempty" yaml:"pgaudit,omitempty" mapstructure:"pgaudit,omitempty"`

	// Pgbouncer corresponds to the JSON schema field "pgbouncer".
	Pgbouncer *PgBouncerConf `json:"pgbouncer,omitempty" yaml:"pgbouncer,omitempty" mapstructure:"pgbouncer,omitempty"`

	// Pghba corresponds to the JSON schema field "pghba".
	Pghba *PgHBAConf `json:"pghba,omitempty" yaml:"pghba,omitempty" mapstructure:"pghba,omitempty"`

	// Postgres corresponds to the JSON schema field "postgres".
	Postgres *PostgresConf `json:"postgres,omitempty" yaml:"postgres,omitempty" mapstructure:"postgres,omitempty"`

	// Postgrest corresponds to the JSON schema field "postgrest".
	Postgrest *PostgrestConf `json:"postgrest,omitempty" yaml:"postgrest,omitempty" mapstructure:"postgrest,omitempty"`

	// Walg corresponds to the JSON schema field "walg".
	Walg *WalgConf `json:"walg,omitempty" yaml:"walg,omitempty" mapstructure:"walg,omitempty"`
}

// Main PostgreSQL server configuration
type PostgresConf struct {
	// Sets the maximum allowed time to complete client authentication.
	AuthenticationTimeout *string `json:"authentication_timeout,omitempty" yaml:"authentication_timeout,omitempty" mapstructure:"authentication_timeout,omitempty"`

	// Enables the planner's use of sequential-scan plans.
	EnableSeqscan bool `json:"enable_seqscan,omitempty" yaml:"enable_seqscan,omitempty" mapstructure:"enable_seqscan,omitempty"`

	// Sets the maximum allowed duration of any wait for a lock. A value of 0 turns
	// off the timeout.
	LockTimeout *string `json:"lock_timeout,omitempty" yaml:"lock_timeout,omitempty" mapstructure:"lock_timeout,omitempty"`

	// Sets the message levels that are logged. Each level includes all the levels
	// that follow it. The later the level, the fewer messages are sent.
	LogMinMessages PostgresConfLogMinMessages `json:"log_min_messages,omitempty" yaml:"log_min_messages,omitempty" mapstructure:"log_min_messages,omitempty"`

	// Sets the number of shared memory buffers used by the server.
	SharedBuffers *string `json:"shared_buffers,omitempty" yaml:"shared_buffers,omitempty" mapstructure:"shared_buffers,omitempty"`

	// Lists shared libraries to preload into server.
	SharedPreloadLibraries *string `json:"shared_preload_libraries,omitempty" yaml:"shared_preload_libraries,omitempty" mapstructure:"shared_preload_libraries,omitempty"`
}

type PostgresConfLogMinMessages string

const PostgresConfLogMinMessagesDebug1 PostgresConfLogMinMessages = "debug1"
const PostgresConfLogMinMessagesDebug2 PostgresConfLogMinMessages = "debug2"
const PostgresConfLogMinMessagesDebug3 PostgresConfLogMinMessages = "debug3"
const PostgresConfLogMinMessagesDebug4 PostgresConfLogMinMessages = "debug4"
const PostgresConfLogMinMessagesDebug5 PostgresConfLogMinMessages = "debug5"
const PostgresConfLogMinMessagesError PostgresConfLogMinMessages = "error"
const PostgresConfLogMinMessagesFatal PostgresConfLogMinMessages = "fatal"
const PostgresConfLogMinMessagesInfo PostgresConfLogMinMessages = "info"
const PostgresConfLogMinMessagesLog PostgresConfLogMinMessages = "log"
const PostgresConfLogMinMessagesNotice PostgresConfLogMinMessages = "notice"
const PostgresConfLogMinMessagesPanic PostgresConfLogMinMessages = "panic"
const PostgresConfLogMinMessagesWarning PostgresConfLogMinMessages = "warning"

// PostgREST API server configuration
type PostgrestConf struct {
	// Database role with admin privileges
	AdminRole string `json:"admin_role,omitempty" yaml:"admin_role,omitempty" mapstructure:"admin_role,omitempty"`

	// Database role for anonymous access
	AnonymousRole string `json:"anonymous_role,omitempty" yaml:"anonymous_role,omitempty" mapstructure:"anonymous_role,omitempty"`

	// Database connection pool size
	DbPool int `json:"db_pool,omitempty" yaml:"db_pool,omitempty" mapstructure:"db_pool,omitempty"`

	// Database connection pool timeout in seconds
	DbPoolTimeout int `json:"db_pool_timeout,omitempty" yaml:"db_pool_timeout,omitempty" mapstructure:"db_pool_timeout,omitempty"`

	// Database schemas to expose via API
	DbSchemas string `json:"db_schemas,omitempty" yaml:"db_schemas,omitempty" mapstructure:"db_schemas,omitempty"`

	// Database connection URI
	DbUri *string `json:"db_uri,omitempty" yaml:"db_uri,omitempty" mapstructure:"db_uri,omitempty"`

	// JWT audience claim
	JwtAud string `json:"jwt_aud,omitempty" yaml:"jwt_aud,omitempty" mapstructure:"jwt_aud,omitempty"`

	// JWT secret for authentication
	JwtSecret *string `json:"jwt_secret,omitempty" yaml:"jwt_secret,omitempty" mapstructure:"jwt_secret,omitempty"`

	// Whether JWT secret is base64 encoded
	JwtSecretIsBase64 bool `json:"jwt_secret_is_base64,omitempty" yaml:"jwt_secret_is_base64,omitempty" mapstructure:"jwt_secret_is_base64,omitempty"`

	// Logging level
	LogLevel PostgrestConfLogLevel `json:"log_level,omitempty" yaml:"log_level,omitempty" mapstructure:"log_level,omitempty"`

	// Maximum rows returned in a single response
	MaxRows *int `json:"max_rows,omitempty" yaml:"max_rows,omitempty" mapstructure:"max_rows,omitempty"`

	// Pre-request function to call
	PreRequest string `json:"pre_request,omitempty" yaml:"pre_request,omitempty" mapstructure:"pre_request,omitempty"`

	// JWT claim key for role
	RoleClaimKey string `json:"role_claim_key,omitempty" yaml:"role_claim_key,omitempty" mapstructure:"role_claim_key,omitempty"`

	// Server host address
	ServerHost string `json:"server_host,omitempty" yaml:"server_host,omitempty" mapstructure:"server_host,omitempty"`

	// Server port
	ServerPort int `json:"server_port,omitempty" yaml:"server_port,omitempty" mapstructure:"server_port,omitempty"`

	// Path to SSL certificate file
	ServerSslCert string `json:"server_ssl_cert,omitempty" yaml:"server_ssl_cert,omitempty" mapstructure:"server_ssl_cert,omitempty"`

	// Path to SSL private key file
	ServerSslKey string `json:"server_ssl_key,omitempty" yaml:"server_ssl_key,omitempty" mapstructure:"server_ssl_key,omitempty"`
}

type PostgrestConfLogLevel string

const PostgrestConfLogLevelCrit PostgrestConfLogLevel = "crit"
const PostgrestConfLogLevelDebug PostgrestConfLogLevel = "debug"
const PostgrestConfLogLevelError PostgrestConfLogLevel = "error"
const PostgrestConfLogLevelInfo PostgrestConfLogLevel = "info"
const PostgrestConfLogLevelWarn PostgrestConfLogLevel = "warn"

// WAL-G backup and archiving configuration
type WalgConf struct {
	// Azure storage account key
	AzAccountKey *string `json:"az_account_key,omitempty" yaml:"az_account_key,omitempty" mapstructure:"az_account_key,omitempty"`

	// Azure storage account name
	AzAccountName *string `json:"az_account_name,omitempty" yaml:"az_account_name,omitempty" mapstructure:"az_account_name,omitempty"`

	// Azure Storage prefix
	AzPrefix *string `json:"az_prefix,omitempty" yaml:"az_prefix,omitempty" mapstructure:"az_prefix,omitempty"`

	// Number of backups to retain
	BackupRetainCount int `json:"backup_retain_count,omitempty" yaml:"backup_retain_count,omitempty" mapstructure:"backup_retain_count,omitempty"`

	// Backup schedule in cron format
	BackupSchedule string `json:"backup_schedule,omitempty" yaml:"backup_schedule,omitempty" mapstructure:"backup_schedule,omitempty"`

	// Compression level (0-9)
	CompressionLevel int `json:"compression_level,omitempty" yaml:"compression_level,omitempty" mapstructure:"compression_level,omitempty"`

	// Compression method for backups
	CompressionMethod WalgConfCompressionMethod `json:"compression_method,omitempty" yaml:"compression_method,omitempty" mapstructure:"compression_method,omitempty"`

	// Maximum steps for delta backups
	DeltaMaxSteps int `json:"delta_max_steps,omitempty" yaml:"delta_max_steps,omitempty" mapstructure:"delta_max_steps,omitempty"`

	// Enable or disable WAL-G
	Enabled bool `json:"enabled,omitempty" yaml:"enabled,omitempty" mapstructure:"enabled,omitempty"`

	// Local file system prefix for backups
	FilePrefix *string `json:"file_prefix,omitempty" yaml:"file_prefix,omitempty" mapstructure:"file_prefix,omitempty"`

	// Google Cloud Storage prefix (e.g., gs://bucket/path/to/folder)
	GsPrefix *string `json:"gs_prefix,omitempty" yaml:"gs_prefix,omitempty" mapstructure:"gs_prefix,omitempty"`

	// Google Cloud project ID
	GsProjectId *string `json:"gs_project_id,omitempty" yaml:"gs_project_id,omitempty" mapstructure:"gs_project_id,omitempty"`

	// Google Cloud service account key JSON
	GsServiceAccountKey *string `json:"gs_service_account_key,omitempty" yaml:"gs_service_account_key,omitempty" mapstructure:"gs_service_account_key,omitempty"`

	// PostgreSQL data directory path
	PostgresqlDataDir string `json:"postgresql_data_dir,omitempty" yaml:"postgresql_data_dir,omitempty" mapstructure:"postgresql_data_dir,omitempty"`

	// AWS S3 access key ID
	S3AccessKey *string `json:"s3_access_key,omitempty" yaml:"s3_access_key,omitempty" mapstructure:"s3_access_key,omitempty"`

	// Custom S3 endpoint URL
	S3Endpoint *string `json:"s3_endpoint,omitempty" yaml:"s3_endpoint,omitempty" mapstructure:"s3_endpoint,omitempty"`

	// S3 storage prefix (e.g., s3://bucket/path/to/folder)
	S3Prefix *string `json:"s3_prefix,omitempty" yaml:"s3_prefix,omitempty" mapstructure:"s3_prefix,omitempty"`

	// AWS S3 region
	S3Region string `json:"s3_region,omitempty" yaml:"s3_region,omitempty" mapstructure:"s3_region,omitempty"`

	// AWS S3 secret access key
	S3SecretKey *string `json:"s3_secret_key,omitempty" yaml:"s3_secret_key,omitempty" mapstructure:"s3_secret_key,omitempty"`

	// AWS S3 session token (for temporary credentials)
	S3SessionToken *string `json:"s3_session_token,omitempty" yaml:"s3_session_token,omitempty" mapstructure:"s3_session_token,omitempty"`

	// Use SSL for S3 connections
	S3UseSsl bool `json:"s3_use_ssl,omitempty" yaml:"s3_use_ssl,omitempty" mapstructure:"s3_use_ssl,omitempty"`

	// Command to create WAL stream
	StreamCreateCommand *string `json:"stream_create_command,omitempty" yaml:"stream_create_command,omitempty" mapstructure:"stream_create_command,omitempty"`

	// Command to restore from WAL stream
	StreamRestoreCommand *string `json:"stream_restore_command,omitempty" yaml:"stream_restore_command,omitempty" mapstructure:"stream_restore_command,omitempty"`

	// Number of concurrent uploads
	UploadConcurrency int `json:"upload_concurrency,omitempty" yaml:"upload_concurrency,omitempty" mapstructure:"upload_concurrency,omitempty"`

	// Number of concurrent disk operations
	UploadDiskConcurrency int `json:"upload_disk_concurrency,omitempty" yaml:"upload_disk_concurrency,omitempty" mapstructure:"upload_disk_concurrency,omitempty"`

	// Verify WAL checksums during backup
	WalVerifyChecksum bool `json:"wal_verify_checksum,omitempty" yaml:"wal_verify_checksum,omitempty" mapstructure:"wal_verify_checksum,omitempty"`
}

type WalgConfCompressionMethod string

const WalgConfCompressionMethodBrotli WalgConfCompressionMethod = "brotli"
const WalgConfCompressionMethodLz4 WalgConfCompressionMethod = "lz4"
const WalgConfCompressionMethodLzma WalgConfCompressionMethod = "lzma"
const WalgConfCompressionMethodZstd WalgConfCompressionMethod = "zstd"
