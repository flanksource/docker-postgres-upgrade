version: "3"

# GitHub Actions output grouping
output:
  group:
    begin: '::group::{{.TASK}}'
    end: '::endgroup::'

# Global environment variables for PostgreSQL paths
env:
  PG14BIN: /usr/lib/postgresql/14/bin
  PG15BIN: /usr/lib/postgresql/15/bin
  PG16BIN: /usr/lib/postgresql/16/bin
  PG17BIN: /usr/lib/postgresql/17/bin

tasks:
  upgrade-single:
    desc: Perform single PostgreSQL upgrade from {{.FROM}} to {{.TO}}
    internal: true
    vars:
      PGBINOLD: /usr/lib/postgresql/{{.FROM}}/bin
      PGBINNEW: /usr/lib/postgresql/{{.TO}}/bin
      PGDATAOLD: /var/lib/postgresql/{{.FROM}}/data
      PGDATANEW: /var/lib/postgresql/{{.TO}}/data
    preconditions:
      - sh: "test {{.FROM}} -lt {{.TO}}"
        msg: "FROM version must be less than TO version"
    cmds:
      - task: pre-upgrade-check
        vars:
          FROM: "{{.FROM}}"
          TO: "{{.TO}}"
          PGBINOLD: "{{.PGBINOLD}}"
          PGBINNEW: "{{.PGBINNEW}}"
          PGDATAOLD: "{{.PGDATAOLD}}"
          PGDATANEW: "{{.PGDATANEW}}"
      - task: init-new-cluster
        vars:
          FROM: "{{.FROM}}"
          TO: "{{.TO}}"
          PGBINOLD: "{{.PGBINOLD}}"
          PGBINNEW: "{{.PGBINNEW}}"
          PGDATAOLD: "{{.PGDATAOLD}}"
          PGDATANEW: "{{.PGDATANEW}}"
      - task: run-pg-upgrade
        vars:
          FROM: "{{.FROM}}"
          TO: "{{.TO}}"
          PGBINOLD: "{{.PGBINOLD}}"
          PGBINNEW: "{{.PGBINNEW}}"
          PGDATAOLD: "{{.PGDATAOLD}}"
          PGDATANEW: "{{.PGDATANEW}}"
      - task: post-upgrade-check
        vars:
          FROM: "{{.FROM}}"
          TO: "{{.TO}}"
          PGBINOLD: "{{.PGBINOLD}}"
          PGBINNEW: "{{.PGBINNEW}}"
          PGDATAOLD: "{{.PGDATAOLD}}"
          PGDATANEW: "{{.PGDATANEW}}"
      - echo "‚úÖ Upgrade from PostgreSQL {{.FROM}} to {{.TO}} completed successfully!"

  upgrade-from-env:
    desc: Upgrade using FROM and TO environment variables (for container entrypoint)
    vars:
      FROM: '{{.FROM | default (env "FROM")}}'
      TO: '{{.TO | default (env "TO")}}'
    cmds:
      - task: upgrade-single
        vars:
          FROM: "{{.FROM}}"
          TO: "{{.TO}}"

  pre-upgrade-check:
    desc: Run pre-upgrade checks for PostgreSQL {{.FROM}} to {{.TO}}
    cmds:
      - |
        echo "üîç Running pre-upgrade checks for PostgreSQL {{.FROM}}..."

        # Check if old cluster exists and is valid
        if [ ! -f "{{.PGDATAOLD}}/PG_VERSION" ]; then
          echo "ERROR: No PostgreSQL {{.FROM}} cluster found at {{.PGDATAOLD}}"
          exit 1
        fi

        # Verify PostgreSQL version
        VERSION=$(cat "{{.PGDATAOLD}}/PG_VERSION")
        if [ "$VERSION" != "{{.FROM}}" ]; then
          echo "ERROR: Expected PostgreSQL {{.FROM}}, but found version $VERSION"
          exit 1
        fi

        echo "‚úÖ PostgreSQL {{.FROM}} cluster verified at {{.PGDATAOLD}}"

        # Check cluster health
        {{.PGBINOLD}}/pg_controldata "{{.PGDATAOLD}}" | grep -q "Database cluster state.*shut down" || {
          echo "WARNING: Database cluster is not cleanly shut down"
        }

        echo "‚úÖ Pre-upgrade checks completed for PostgreSQL {{.FROM}}"

  init-new-cluster:
    desc: Initialize new PostgreSQL {{.TO}} cluster if needed
    internal: true
    status:
      - test -s "{{.PGDATANEW}}/PG_VERSION"
    cmds:
      - |
        echo "üîß Initializing PostgreSQL {{.TO}} cluster..."
        mkdir -p "{{.PGDATANEW}}"
        chown postgres:postgres "{{.PGDATANEW}}"
        {{.PGBINNEW}}/initdb -D "{{.PGDATANEW}}"
        echo "‚úÖ PostgreSQL {{.TO}} cluster initialized"

  run-pg-upgrade:
    desc: Run pg_upgrade from PostgreSQL {{.FROM}} to {{.TO}}
    internal: true
    cmds:
      - |
        echo "‚ö° Performing pg_upgrade from PostgreSQL {{.FROM}} to {{.TO}}..."
        cd /var/lib/postgresql

        # Create socket directory and set permissions
        mkdir -p /var/run/postgresql
        chown postgres:postgres /var/run/postgresql
        chmod 755 /var/run/postgresql

        # Run pg_upgrade check first
        {{.PGBINNEW}}/pg_upgrade \
          --old-bindir="{{.PGBINOLD}}" \
          --new-bindir="{{.PGBINNEW}}" \
          --old-datadir="{{.PGDATAOLD}}" \
          --new-datadir="{{.PGDATANEW}}" \
          --link \
          --socketdir=/var/run/postgresql \
          --check

        # If check passes, run the actual upgrade
        {{.PGBINNEW}}/pg_upgrade \
          --old-bindir="{{.PGBINOLD}}" \
          --new-bindir="{{.PGBINNEW}}" \
          --old-datadir="{{.PGDATAOLD}}" \
          --new-datadir="{{.PGDATANEW}}" \
          --link \
          --socketdir=/var/run/postgresql

        echo "‚úÖ pg_upgrade completed successfully"

  post-upgrade-check:
    desc: Run post-upgrade checks for PostgreSQL {{.TO}}
    cmds:
      - |
        echo "üîç Running post-upgrade checks for PostgreSQL {{.TO}}..."

        # Check if new cluster exists
        if [ ! -f "{{.PGDATANEW}}/PG_VERSION" ]; then
          echo "ERROR: No PostgreSQL {{.TO}} cluster found at {{.PGDATANEW}}"
          exit 1
        fi

        # Verify PostgreSQL version
        VERSION=$(cat "{{.PGDATANEW}}/PG_VERSION")
        if [ "$VERSION" != "{{.TO}}" ]; then
          echo "ERROR: Expected PostgreSQL {{.TO}}, but found version $VERSION"
          exit 1
        fi

        echo "‚úÖ PostgreSQL {{.TO}} cluster verified at {{.PGDATANEW}}"

        # Verify cluster data without starting the server
        echo "Verifying upgraded cluster data..."
        
        # Check control data
        {{.PGBINNEW}}/pg_controldata "{{.PGDATANEW}}" | grep -E "(Database cluster state|pg_control version|Catalog version)" || {
          echo "ERROR: Cannot read control data from upgraded cluster"
          exit 1
        }
        
        # Verify basic file structure
        if [ ! -f "{{.PGDATANEW}}/postgresql.conf" ] || [ ! -f "{{.PGDATANEW}}/pg_hba.conf" ]; then
          echo "ERROR: Missing configuration files in upgraded cluster"
          exit 1
        fi
        
        echo "NOTE: Full database verification skipped in container environment"
        echo "To verify the upgrade, start PostgreSQL {{.TO}} and run:"
        echo "  - SELECT version();"
        echo "  - \\l to list databases"
        echo "  - vacuumdb -a -z"

        echo "‚úÖ Post-upgrade checks completed for PostgreSQL {{.TO}}"