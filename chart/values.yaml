# Default values for postgres-upgrade chart

# Main PostgreSQL container (Enhanced PostgreSQL with extensions)
postgresql:
  image:
    registry: ghcr.io
    repository: flanksource/postgres
    tag: "17-latest"
    pullPolicy: IfNotPresent

# PostgreSQL upgrade init container
upgradeContainer:
  image:
    registry: ghcr.io
    repository: flanksource/docker-postgres-upgrade-upgrade
    # Tag options: to-15-latest, to-16-latest, to-17-latest, latest
    tag: "latest"
    pullPolicy: IfNotPresent

  # Whether to run upgrade on startup
  enabled: true

# PostgreSQL database configuration
database:
  # PostgreSQL version to run (will upgrade to this version on startup if data exists)
  version: "17"

  # Database configuration
  name: postgres
  username: postgres
  # Leave password empty to generate a random one
  password: ""

  # Admin password reset on startup (handled by init container)
  resetPassword: false

  # Automatic upgrade on startup (handled by init container)
  autoUpgrade: true

  # PostgreSQL configuration settings
  # These will be dynamically adjusted based on resource limits if not explicitly set
  config:
    # Memory settings (will be auto-calculated if not set)
    shared_buffers: ""
    effective_cache_size: ""
    work_mem: ""
    maintenance_work_mem: ""

    # Connection settings
    max_connections: "100"

    # WAL settings
    wal_buffers: ""
    checkpoint_completion_target: "0.9"

    # Performance settings
    random_page_cost: "1.1"
    effective_io_concurrency: "200"

    # Custom configuration (key-value pairs)
    custom: {}

  # PostgreSQL Extensions Configuration
  extensions:
    enabled: true
    # List of extensions to enable
    # Available: pgvector, pgsodium, pgjwt, pgaudit, pg_tle, pg_stat_monitor, 
    #           pg_repack, pg_plan_filter, pg_net, pg_jsonschema, pg_hashids, 
    #           pg_cron, pg-safeupdate, index_advisor, wal2json
    list: ["pgvector", "pgaudit", "pg_cron"]
  
    # Extension-specific configuration
    pgvector:
      # Enable pgvector for vector similarity search
      enabled: true
    
    pgaudit:
      # Audit logging configuration
      enabled: true
      log: "all"
      log_level: "notice"
    
    pg_cron:
      # Cron job scheduler configuration
      enabled: true
      database_name: "postgres"

# PgBouncer connection pooling configuration
pgbouncer:
  enabled: false
  port: 6432
  poolMode: transaction
  maxClientConn: 100
  defaultPoolSize: 25
  serverLifetime: 3600
  serverIdleTimeout: 600
  authType: md5

# PostgREST API configuration
postgrest:
  enabled: false
  port: 3000
  dbSchemas: "public"
  dbAnonRole: "postgres"
  dbPool: 10
  dbPoolTimeout: 10
  jwtSecret: ""
  jwtAud: ""
  logLevel: "error"

# Backup configuration
backup:
  enabled: false

# WAL-G backup configuration
walg:
  enabled: false
  # Storage configuration (choose one)
  storage:
    # S3 configuration
    s3:
      enabled: false
      prefix: ""
      region: ""
      endpoint: ""
      accessKey: ""
      secretKey: ""
    
    # Google Cloud Storage configuration
    gcs:
      enabled: false
      prefix: ""
      credentials: ""
    
    # Azure Blob Storage configuration
    azure:
      enabled: false
      prefix: ""
      accountName: ""
      accountKey: ""
    
    # File system storage configuration
    file:
      enabled: false
      prefix: "/backup"
  
  # Backup scheduling
  backup:
    schedule: "0 2 * * *"  # Daily at 2 AM
    retainCount: 7
    compress: "lz4"
    initialBackup: false

# Resource configuration
resources:
  limits:
    cpu: 2000m
    memory: 4Gi
  requests:
    cpu: 500m
    memory: 1Gi

# Persistence configuration
persistence:
  enabled: true
  storageClass: ""
  accessMode: ReadWriteOnce
  size: 10Gi
  annotations: {}

# Service configuration
service:
  type: ClusterIP
  port: 5432
  targetPort: 5432
  annotations: {}

# ServiceAccount configuration
serviceAccount:
  create: true
  annotations: {}
  name: ""

# Pod security context
podSecurityContext:
  fsGroup: 999
  runAsUser: 999
  runAsGroup: 999

# Container security context
securityContext:
  allowPrivilegeEscalation: false
  capabilities:
    drop:
      - ALL
  readOnlyRootFilesystem: false
  runAsNonRoot: true
  runAsUser: 999

# Node selector
nodeSelector: {}

# Tolerations
tolerations: []

# Affinity
affinity: {}

# Pod annotations
podAnnotations: {}

# Pod labels
podLabels: {}

# Startup probe configuration
startupProbe:
  enabled: true
  initialDelaySeconds: 30
  periodSeconds: 10
  timeoutSeconds: 5
  failureThreshold: 30
  successThreshold: 1

# Readiness probe configuration
readinessProbe:
  enabled: true
  initialDelaySeconds: 5
  periodSeconds: 10
  timeoutSeconds: 5
  failureThreshold: 3
  successThreshold: 1

# Liveness probe configuration
livenessProbe:
  enabled: true
  initialDelaySeconds: 30
  periodSeconds: 30
  timeoutSeconds: 5
  failureThreshold: 3
  successThreshold: 1

# Init containers
initContainers: []

# Additional volumes
extraVolumes: []

# Additional volume mounts
extraVolumeMounts: []

# Environment variables
env: []

# PodDisruptionBudget
podDisruptionBudget:
  enabled: false
  minAvailable: 1

# Metrics configuration (for monitoring integration)
metrics:
  enabled: false
  serviceMonitor:
    enabled: false
    namespace: ""
    labels: {}
    annotations: {}

# Network policy
networkPolicy:
  enabled: false
  ingress: []
  egress: []
