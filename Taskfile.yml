version: "3"

# GitHub Actions output grouping when GITHUB_ACTIONS=true or CI=true
output:
  group:
    begin: "::group::{{.TASK}}"
    end: "::endgroup::"

includes:
  build: ./Taskfile.build.yaml
  test: ./Taskfile.test.yaml
  run: ./Taskfile.run.yaml

# Default tasks that delegate to included files
tasks:
  default:
    desc: Auto-detect PostgreSQL version and upgrade to PG_VERSION target (default 17)
    cmds:
      - task: run:auto-upgrade

  # Build shortcuts
  build:
    desc: Build the postgres-upgrade Docker image
    cmds:
      - task: build:build

  build-all:
    desc: Build all target version images
    cmds:
      - task: build:build-all

  # Test shortcuts
  test:
    desc: Test all PostgreSQL upgrades
    cmds:
      - task: build:build
      - task: test:all

  clean:
    desc: Clean up everything
    cmds:
      - task: test:clean

  status:
    desc: Show status of volumes and images
    cmds:
      - task: test:status

  # Development shortcuts
  dev-setup:
    desc: Set up development environment
    cmds:
      - task: build:build
      - task: test:dev-setup

  dev-test-quick:
    desc: Quick development test (14 to 17 upgrade only)
    cmds:
      - task: build:build
      - task: test:dev-test-quick

  # Upgrade shortcuts (for running inside container)
  auto-upgrade:
    desc: Auto-detect and upgrade PostgreSQL (with password reset if needed)
    cmds:
      - task: run:auto-upgrade

  reset-password:
    desc: Reset PostgreSQL password if RESET_PASSWORD=true
    cmds:
      - task: run:reset-password

  upgrade-single:
    desc: Perform single PostgreSQL upgrade
    cmds:
      - task: run:upgrade-single

  upgrade-from-env:
    desc: Upgrade using environment variables
    cmds:
      - task: run:upgrade-from-env

  # Help task
  help:
    desc: Show detailed help for all tasks
    cmds:
      - echo "PostgreSQL Upgrade Docker Container - Task Runner"
      - echo "================================================"
      - 'echo ""'
      - echo "Main Tasks (Container):"
      - echo "  task (default)          - Auto-detect current PostgreSQL version and upgrade to target"
      - echo "  task auto-upgrade       - Same as default - auto-detect and upgrade with password reset"
      - echo "  task reset-password     - Reset PostgreSQL password (if RESET_PASSWORD=true)"
      - 'echo ""'
      - echo "Environment Variables:"
      - 'echo "  PG_VERSION=17           - Target PostgreSQL version (default: 17)"'
      - 'echo "  AUTO_UPGRADE=false      - Disable auto-upgrade (default: true)"'
      - 'echo "  RESET_PASSWORD=true     - Reset password on startup (default: false)"'
      - 'echo "  POSTGRES_PASSWORD=...   - New password for reset"'
      - 'echo "  POSTGRES_USER=postgres  - User for password reset (default: postgres)"'
      - 'echo ""'
      - echo "Build Tasks:"
      - echo "  task build              - Build the default postgres-upgrade image"
      - echo "  task build:build-15     - Build image that upgrades to PostgreSQL 15"
      - echo "  task build:build-16     - Build image that upgrades to PostgreSQL 16"
      - echo "  task build:build-17     - Build image that upgrades to PostgreSQL 17"
      - echo "  task build:build-all    - Build all target version images"
      - 'echo ""'
      - echo "Test Tasks:"
      - echo "  task test               - Run all upgrade tests"
      - echo "  task test:seed-all      - Seed all test volumes"
      - echo "  task test:upgrade-14-to-17 - Test PostgreSQL 14 to 17 upgrade"
      - echo "  task test:upgrade-15-to-17 - Test PostgreSQL 15 to 17 upgrade"
      - echo "  task test:upgrade-16-to-17 - Test PostgreSQL 16 to 17 upgrade"
      - 'echo ""'
      - echo "Utility Tasks:"
      - echo "  task clean              - Clean up volumes and images"
      - echo "  task status             - Show status of volumes and images"
      - echo "  task dev-setup          - Set up development environment"
      - echo "  task dev-test-quick     - Quick test (14 to 17 only)"
      - 'echo ""'
      - echo "Legacy Tasks (Advanced):"
      - 'echo "  task upgrade-single     - Perform single version upgrade (FROM= TO=)"'
      - 'echo "  task upgrade-from-env   - Upgrade using FROM/TO environment variables"'
      - 'echo ""'
      - 'echo "For more details on any task, run: task --summary <task-name>"'
