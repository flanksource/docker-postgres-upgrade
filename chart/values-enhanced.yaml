# Enhanced PostgreSQL Chart Values
# Includes PostgreSQL, PgBouncer, PostgREST, and WAL-G support

# Enhanced PostgreSQL container with s6-overlay
postgresql:
  image:
    registry: ghcr.io
    repository: flanksource/postgres-enhanced
    tag: "17-latest"
    pullPolicy: IfNotPresent

  # PostgreSQL database configuration
  database:
    name: postgres
    username: postgres
    # Leave password empty to generate a random one
    password: ""
    
    # Extensions configuration
    extensions:
      enabled: true
      # List of extensions to enable (all available extensions)
      list:
        - pgvector    # Vector similarity search
        - pg_cron     # Job scheduling
        - pgjwt       # JWT functions
        - pg_hashids  # Short unique IDs
        - hypopg      # Hypothetical indexes
        - pgcrypto    # Cryptographic functions

    # PostgreSQL configuration overrides
    config:
      # Memory settings (auto-calculated if not set)
      shared_buffers: ""
      effective_cache_size: ""
      work_mem: ""
      maintenance_work_mem: ""
      
      # Connection settings
      max_connections: "200"
      
      # WAL settings
      wal_level: "replica"
      max_wal_senders: "10"
      wal_keep_size: "1GB"
      
      # Performance settings
      random_page_cost: "1.1"
      effective_io_concurrency: "200"
      checkpoint_completion_target: "0.9"
      
      # Custom configuration (key-value pairs)
      custom: {}

# PgBouncer connection pooling configuration
pgbouncer:
  enabled: false
  
  # Connection pooling settings
  config:
    port: 6432
    maxClientConn: 100
    defaultPoolSize: 25
    poolMode: "transaction"  # session, transaction, statement
    authType: "md5"
    serverLifetime: 3600
    serverIdleTimeout: 600
    
    # Custom PgBouncer configuration
    custom: {}

# PostgREST REST API configuration
postgrest:
  enabled: false
  
  config:
    port: 3000
    dbSchema: "public"
    dbAnonRole: "anon"
    dbPool: 10
    dbPoolTimeout: 10
    maxRows: 1000
    
    # JWT configuration
    jwtSecret: ""
    jwtAud: ""
    
    # API configuration
    openApiServerProxyUri: ""
    logLevel: "error"

# WAL-G backup configuration
backup:
  enabled: false
  
  # Backup schedule (cron format)
  schedule: "0 2 * * *"  # Daily at 2 AM
  
  walg:
    # Compression method: lz4, lzma, brotli
    compressionMethod: "lz4"
    
    # Backup retention
    retainCount: 7  # Keep 7 backups
    
    # Storage configuration (choose one)
    storage:
      # S3 compatible storage
      s3:
        enabled: false
        prefix: ""  # e.g., "s3://my-bucket/postgres-backups"
        region: "us-east-1"
        accessKeyId: ""
        secretAccessKey: ""
        
      # Google Cloud Storage
      gcs:
        enabled: false
        prefix: ""  # e.g., "gs://my-bucket/postgres-backups"
        credentialsJson: ""
        
      # Azure Blob Storage
      azure:
        enabled: false
        prefix: ""  # e.g., "azure://my-account/my-container/postgres-backups"
        accountName: ""
        accessKey: ""

# Service configuration
services:
  postgresql:
    type: ClusterIP
    port: 5432
    targetPort: 5432
    annotations: {}
    
  pgbouncer:
    type: ClusterIP
    port: 6432
    targetPort: 6432
    annotations: {}
    
  postgrest:
    type: ClusterIP
    port: 3000
    targetPort: 3000
    annotations: {}

# Ingress configuration
ingress:
  enabled: false
  className: ""
  annotations: {}
  
  # PostgreSQL ingress (typically not exposed)
  postgresql:
    enabled: false
    hosts: []
    tls: []
    
  # PgBouncer ingress (typically not exposed)
  pgbouncer:
    enabled: false
    hosts: []
    tls: []
    
  # PostgREST API ingress
  postgrest:
    enabled: false
    hosts:
      - host: api.example.com
        paths:
          - path: /
            pathType: Prefix
    tls: []

# Resource configuration
resources:
  limits:
    cpu: 2000m
    memory: 4Gi
  requests:
    cpu: 500m
    memory: 1Gi

# Horizontal Pod Autoscaler
autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  targetMemoryUtilizationPercentage: 80

# Persistence configuration
persistence:
  enabled: true
  storageClass: ""
  accessMode: ReadWriteOnce
  size: 20Gi
  annotations: {}

# ServiceAccount configuration
serviceAccount:
  create: true
  annotations: {}
  name: ""

# Pod security context
podSecurityContext:
  fsGroup: 999
  runAsUser: 999
  runAsGroup: 999

# Container security context
securityContext:
  allowPrivilegeEscalation: false
  readOnlyRootFilesystem: false
  runAsNonRoot: true
  runAsUser: 999
  capabilities:
    drop:
    - ALL

# Node selector
nodeSelector: {}

# Tolerations
tolerations: []

# Affinity
affinity: {}

# Pod annotations
podAnnotations: {}

# Pod labels
podLabels: {}

# Health checks
healthChecks:
  enabled: true
  
  # Liveness probe
  livenessProbe:
    enabled: true
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    successThreshold: 1
    failureThreshold: 6
    
  # Readiness probe
  readinessProbe:
    enabled: true
    initialDelaySeconds: 5
    periodSeconds: 10
    timeoutSeconds: 5
    successThreshold: 1
    failureThreshold: 6

# Monitoring
monitoring:
  enabled: false
  
  # ServiceMonitor for Prometheus
  serviceMonitor:
    enabled: false
    interval: 30s
    scrapeTimeout: 10s
    labels: {}

# Network Policy
networkPolicy:
  enabled: false
  
  # Ingress rules
  ingress: []
  
  # Egress rules
  egress: []

# Pod Disruption Budget
podDisruptionBudget:
  enabled: false
  minAvailable: 1
  maxUnavailable: ""

# Extra environment variables
extraEnv: []

# Extra volumes
extraVolumes: []

# Extra volume mounts
extraVolumeMounts: []