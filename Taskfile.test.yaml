version: "3"

# GitHub Actions output grouping
output:
  group:
    begin: '::group::{{.TASK}}'
    end: '::endgroup::'

vars:
  IMAGE_NAME: postgres-upgrade:latest
  PG_VERSIONS: [14, 15, 16]
  UPGRADE_MATRIX:
    - FROM: 14
      TO: 17
    - FROM: 15
      TO: 17
    - FROM: 16
      TO: 17

tasks:
  build:
    cmds:
      - task build:build
  # Volume management tasks
  create-volumes:
    desc: Create all test volumes
    cmds:
      - for: { var: PG_VERSIONS }
        task: create-volume
        vars:
          VERSION: "{{.ITEM}}"

  create-volume:
    desc: Create PostgreSQL volume for version {{.VERSION}}
    internal: true
    cmds:
      - docker volume create pg{{.VERSION}}-test-data
    status:
      - docker volume inspect pg{{.VERSION}}-test-data >/dev/null 2>&1

  # Seeding tasks
  seed-all:
    desc: Seed all PostgreSQL versions with test data
    deps: [create-volumes]
    cmds:
      - for: { var: PG_VERSIONS }
        task: seed-version
        vars:
          VERSION: "{{.ITEM}}"

  seed-pg14:
    desc: Seed PostgreSQL 14 volume with test data
    cmds:
      - task: seed-version
        vars: { VERSION: "14" }

  seed-pg15:
    desc: Seed PostgreSQL 15 volume with test data
    cmds:
      - task: seed-version
        vars: { VERSION: "15" }

  seed-pg16:
    desc: Seed PostgreSQL 16 volume with test data
    cmds:
      - task: seed-version
        vars: { VERSION: "16" }

  seed-version:
    desc: Seed PostgreSQL {{.VERSION}} with test data
    internal: true
    vars:
      VOLUME: pg{{.VERSION}}-test-data
      CONTAINER_NAME: postgres-seed-{{.VERSION}}-{{now | date "20060102150405"}}
    deps:
      - task: create-volume
        vars: { VERSION: "{{.VERSION}}" }
    preconditions:
      - docker volume inspect {{.VOLUME}} >/dev/null 2>&1
    cmds:
      - docker rm -f postgres-seed-{{.VERSION}} 2>/dev/null || true
      - |
        echo "üå± Seeding PostgreSQL {{.VERSION}} volume {{.VOLUME}}..."
        docker run -d \
          --name {{.CONTAINER_NAME}} \
          -e POSTGRES_PASSWORD=testpass \
          -e POSTGRES_DB=testdb \
          -v {{.VOLUME}}:/var/lib/postgresql/data \
          postgres:{{.VERSION}}
      - |
        echo "‚è≥ Waiting for PostgreSQL {{.VERSION}} to be ready..."
        for i in {1..30}; do
          if docker exec {{.CONTAINER_NAME}} pg_isready -U postgres >/dev/null 2>&1; then
            echo "‚úÖ PostgreSQL {{.VERSION}} is ready"
            break
          fi
          echo -n "."
          sleep 1
        done
      - |
        echo "üìä Creating test data for PostgreSQL {{.VERSION}}..."
        docker exec {{.CONTAINER_NAME}} psql -U postgres -d testdb -c "
          DO \$\$
          BEGIN
            IF NOT EXISTS (SELECT FROM pg_catalog.pg_roles WHERE rolname = 'testuser') THEN
              CREATE USER testuser WITH PASSWORD 'testpass';
            END IF;
          END
          \$\$;

          GRANT ALL PRIVILEGES ON DATABASE testdb TO testuser;

          DROP TABLE IF EXISTS test_table CASCADE;
          CREATE TABLE test_table (
            id SERIAL PRIMARY KEY,
            name VARCHAR(100),
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            version VARCHAR(10) DEFAULT '{{.VERSION}}'
          );

          INSERT INTO test_table (name) VALUES
            ('Test Record 1 from PG{{.VERSION}}'),
            ('Test Record 2 from PG{{.VERSION}}'),
            ('Test Record 3 from PG{{.VERSION}}');

          DROP TABLE IF EXISTS version_info CASCADE;
          CREATE TABLE version_info (
            id INTEGER PRIMARY KEY,
            original_version VARCHAR(10),
            seed_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP
          );

          INSERT INTO version_info (id, original_version) VALUES (1, '{{.VERSION}}');
        "
      - docker stop {{.CONTAINER_NAME}}
      - docker rm {{.CONTAINER_NAME}}
      - task: verify-seed
        vars: { VERSION: "{{.VERSION}}" }
      - echo "‚úÖ Successfully seeded PostgreSQL {{.VERSION}} volume"

  copy-volume:
    desc: Copy a Docker volume
    internal: true
    vars:
      SOURCE: "{{.SOURCE}}"
      DEST: "{{.DEST}}"
    cmds:
      - docker volume create {{.DEST}}
      - |
        docker run --rm \
          -v {{.SOURCE}}:/source:ro \
          -v {{.DEST}}:/dest \
          --user root \
          postgres:17 bash -c "
            cp -a /source/* /dest/ &&
            chown -R postgres:postgres /dest/ &&
            chmod 700 /dest/
          "

  verify-seed:
    desc: Verify seeded data for PostgreSQL {{.VERSION}}
    internal: true
    vars:
      VOLUME: pg{{.VERSION}}-test-data
      CONTAINER_NAME: verify-seed-{{.VERSION}}-{{now | date "20060102150405"}}
    cmds:
      - |
        echo "üîç Verifying seed data for PostgreSQL {{.VERSION}}..."
        docker run --rm \
          --name {{.CONTAINER_NAME}} \
          --user postgres \
          -v {{.VOLUME}}:/var/lib/postgresql/data \
          postgres:{{.VERSION}} \
          bash -c "
            pg_ctl -D /var/lib/postgresql/data start -w &&
            psql -U postgres -d testdb -c 'SELECT COUNT(*) as record_count FROM test_table;' &&
            psql -U postgres -d testdb -c 'SELECT * FROM version_info;' &&
            pg_ctl -D /var/lib/postgresql/data stop -w
          " || (echo "‚ùå Seed verification failed for PostgreSQL {{.VERSION}}" && exit 1)
        echo "‚úÖ Seed verification passed for PostgreSQL {{.VERSION}}"

  # Test tasks
  all:
    desc: Test all PostgreSQL upgrades
    deps: [seed-all]
    cmds:
      - for: { var: UPGRADE_MATRIX }
        task: run-upgrade-test
        vars:
          FROM_VERSION: "{{.ITEM.FROM}}"
          TO_VERSION: "{{.ITEM.TO}}"

  upgrade-14-to-17:
    desc: Test upgrade from PostgreSQL 14 to 17
    cmds:
      - task: run-upgrade-test
        vars: { FROM_VERSION: "14", TO_VERSION: "17" }

  upgrade-15-to-17:
    desc: Test upgrade from PostgreSQL 15 to 17
    cmds:
      - task: run-upgrade-test
        vars: { FROM_VERSION: "15", TO_VERSION: "17" }

  upgrade-16-to-17:
    desc: Test upgrade from PostgreSQL 16 to 17
    cmds:
      - task: run-upgrade-test
        vars: { FROM_VERSION: "16", TO_VERSION: "17" }

  upgrade-14-to-15:
    desc: Test upgrade from PostgreSQL 14 to 15
    cmds:
      - task: run-upgrade-test
        vars: { FROM_VERSION: "14", TO_VERSION: "15" }

  upgrade-14-to-16:
    desc: Test upgrade from PostgreSQL 14 to 16
    cmds:
      - task: run-upgrade-test
        vars: { FROM_VERSION: "14", TO_VERSION: "16" }

  upgrade-15-to-16:
    desc: Test upgrade from PostgreSQL 15 to 16
    cmds:
      - task: run-upgrade-test
        vars: { FROM_VERSION: "15", TO_VERSION: "16" }

  run-upgrade-test:
    desc: Run upgrade test from PostgreSQL {{.FROM_VERSION}} to {{.TO_VERSION}}
    internal: true
    vars:
      SOURCE_VOLUME: pg{{.FROM_VERSION}}-test-data
      TEST_VOLUME: pg{{.FROM_VERSION}}-to-{{.TO_VERSION}}-test-{{now | date "20060102150405"}}
    deps:
      - task: seed-version
        vars: { VERSION: "{{.FROM_VERSION}}" }
    preconditions:
      - docker volume inspect {{.SOURCE_VOLUME}} >/dev/null 2>&1
    cmds:
      - task: copy-volume
        vars:
          SOURCE: "{{.SOURCE_VOLUME}}"
          DEST: "{{.TEST_VOLUME}}"
      - task: run-upgrade
        vars:
          FROM_VERSION: "{{.FROM_VERSION}}"
          TO_VERSION: "{{.TO_VERSION}}"
          VOLUME: "{{.TEST_VOLUME}}"
      - task: verify-upgrade
        vars:
          FROM_VERSION: "{{.FROM_VERSION}}"
          TO_VERSION: "{{.TO_VERSION}}"
          VOLUME: "{{.TEST_VOLUME}}"
      - docker volume rm {{.TEST_VOLUME}} || true

  run-upgrade:
    desc: Run PostgreSQL upgrade from {{.FROM_VERSION}} to {{.TO_VERSION}}
    deps:
      - task: build
    preconditions:
      - docker volume inspect {{.VOLUME}} >/dev/null 2>&1
      - sh: "test {{.FROM_VERSION}} -lt {{.TO_VERSION}}"
        msg: "FROM_VERSION must be less than TO_VERSION"
    cmds:
      - |
        echo "üöÄ Starting upgrade from PostgreSQL {{.FROM_VERSION}} to {{.TO_VERSION}}..."
        docker run --rm \
          --user postgres \
          -v {{.VOLUME}}:/var/lib/postgresql/data \
          -e TARGET_VERSION={{.TO_VERSION}} \
          -w /var/lib/postgresql \
          {{.IMAGE_NAME}}

  verify-upgrade:
    desc: Verify upgrade results
    internal: true
    vars:
      CONTAINER_NAME: verify-upgrade-{{.FROM_VERSION}}-to-{{.TO_VERSION}}
    cmds:
      - |
        echo "üîç Verifying upgrade from PostgreSQL {{.FROM_VERSION}} to {{.TO_VERSION}}..."
        docker run --rm \
          --name {{.CONTAINER_NAME}} \
          -v {{.VOLUME}}:/var/lib/postgresql/data \
          --user postgres \
          postgres:{{.TO_VERSION}} \
          bash -c '
            # Start PostgreSQL
            pg_ctl -D /var/lib/postgresql/data start -w || exit 1

            # Check version
            actual_version=$(psql -U postgres -t -c "SHOW server_version;" | sed "s/^ *//" | grep -oE "^[0-9]+" | head -1)
            if [ "$actual_version" != "{{.TO_VERSION}}" ]; then
              echo "‚ùå Version mismatch. Expected {{.TO_VERSION}}, got $actual_version"
              exit 1
            fi
            echo "‚úÖ PostgreSQL version is {{.TO_VERSION}}"

            # Check tables exist
            table_count=$(psql -U postgres -d testdb -t -c "SELECT COUNT(*) FROM pg_tables WHERE schemaname = '"'"'public'"'"';" | tr -d " ")
            if [ "$table_count" -lt 2 ]; then
              echo "‚ùå Tables missing. Expected at least 2, found $table_count"
              exit 1
            fi
            echo "‚úÖ Tables are present"

            # Check data integrity
            record_count=$(psql -U postgres -d testdb -t -c "SELECT COUNT(*) FROM test_table;" | tr -d " ")
            if [ "$record_count" != "3" ]; then
              echo "‚ùå Data integrity check failed. Expected 3 records, found $record_count"
              exit 1
            fi
            echo "‚úÖ Data integrity verified"

            # Check original version info
            original_version=$(psql -U postgres -d testdb -t -c "SELECT original_version FROM version_info WHERE id = 1;" | tr -d " ")
            if [ "$original_version" != "{{.FROM_VERSION}}" ]; then
              echo "‚ùå Original version info corrupted. Expected {{.FROM_VERSION}}, found $original_version"
              exit 1
            fi
            echo "‚úÖ Original version info preserved"

            # Display sample data
            echo "Sample data after upgrade:"
            psql -U postgres -d testdb -c "SELECT * FROM test_table LIMIT 2;"

            # Stop PostgreSQL
            pg_ctl -D /var/lib/postgresql/data stop -w
          ' || (echo "‚ùå Upgrade verification failed" && exit 1)
        echo "‚úÖ Upgrade verification passed!"

  # Cleanup tasks
  clean-volumes:
    desc: Remove all test volumes
    cmds:
      - |
        echo "üßπ Removing containers using test volumes..."
        # Remove containers using base volumes
        for version in {{.PG_VERSIONS}}; do
          volume="pg${version}-test-data"
          docker ps -a --filter volume=$volume -q | xargs -r docker rm -f 2>/dev/null || true
        done
        # Remove containers using temporary test volumes
        docker ps -a -q | xargs -r docker inspect --format '{{range .Mounts}}{{if eq .Type "volume"}}{{.Name}}{{end}}{{end}}' | \
          grep -E "^pg[0-9]+-to-[0-9]+-test-" | \
          xargs -r -I {} docker ps -a --filter volume={} -q | \
          xargs -r docker rm -f 2>/dev/null || true
      - |
        echo "üßπ Removing temporary test volumes..."
        docker volume ls -q | grep -E "^pg[0-9]+-to-[0-9]+-test-" | xargs -r docker volume rm 2>/dev/null || true
      - |
        echo "üßπ Removing base test volumes..."
        for version in {{.PG_VERSIONS}}; do
          docker volume rm -f pg${version}-test-data 2>/dev/null || true
        done

  clean-images:
    desc: Remove Docker images
    cmds:
      - docker rmi {{.IMAGE_NAME}} {{.IMAGE_NAME}}-test || true

  clean:
    desc: Clean up everything
    deps: [clean-volumes, clean-images]
    cmds:
      - echo "üßπ Cleanup completed"

  # Development tasks
  dev-setup:
    desc: Set up development environment
    deps: [create-volumes]
    cmds:
      - echo "üîß Development environment ready"

  dev-test-quick:
    desc: Quick development test (14 to 17 upgrade only)
    deps: [seed-pg14, upgrade-14-to-17]
    cmds:
      - echo "‚ö° Quick test completed"

  # Status tasks
  status:
    desc: Show status of volumes and images
    cmds:
      - echo "üìä Docker Volumes:"
      - |
        volumes_found=false
        for version in {{range .PG_VERSIONS}}{{.}} {{end}}; do
          if docker volume inspect pg${version}-test-data >/dev/null 2>&1; then
            echo "  ‚úÖ pg${version}-test-data"
            volumes_found=true
          else
            echo "  ‚ùå pg${version}-test-data (missing)"
          fi
        done
        if [ "$volumes_found" = false ]; then
          echo "  No test volumes found"
        fi
      - echo
      - echo "üìä Docker Images:"
      - docker images | grep postgres-upgrade || echo "  No postgres-upgrade images found"
      - echo
      - echo "üìä Running Containers:"
      - docker ps | grep -E "(postgres|upgrade)" || echo "  No related containers running"
