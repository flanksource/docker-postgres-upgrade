version: '3'

vars:
  POSTGRES_USER: '{{.POSTGRES_USER | default "postgres"}}'
  POSTGRES_DB: '{{.POSTGRES_DB | default "testdb"}}'

tasks:
  pre-upgrade:
    desc: "Run pre-upgrade sanity checks"
    vars:
      PGBIN: '$PG{{.FROM}}BIN'
      PGDATA: '$PG{{.FROM}}DATA'
    cmds:
      - echo "Running pre-upgrade checks for PostgreSQL {{.FROM}}..."
      - |
        # Check if old cluster exists and is valid
        if [ ! -f "{{.PGDATA}}/PG_VERSION" ]; then
          echo "ERROR: No PostgreSQL {{.FROM}} cluster found at {{.PGDATA}}"
          exit 1
        fi
      - |
        # Verify PostgreSQL version
        VERSION=$(cat "{{.PGDATA}}/PG_VERSION")
        if [ "$VERSION" != "{{.FROM}}" ]; then
          echo "ERROR: Expected PostgreSQL {{.FROM}}, but found version $VERSION"
          exit 1
        fi
      - echo "✓ PostgreSQL {{.FROM}} cluster verified at {{.PGDATA}}"
      - |
        # Check cluster health
        {{.PGBIN}}/pg_controldata "{{.PGDATA}}" | grep -q "Database cluster state.*shut down" || {
          echo "WARNING: Database cluster is not cleanly shut down"
        }
      - echo "✓ Pre-upgrade checks completed for PostgreSQL {{.FROM}}"

  post-upgrade:
    desc: "Run post-upgrade sanity checks"
    vars:
      PGBIN: '$PG{{.TO}}BIN'
      PGDATA: '$PG{{.TO}}DATA'
    cmds:
      - echo "Running post-upgrade checks for PostgreSQL {{.TO}}..."
      - |
        # Check if new cluster exists
        if [ ! -f "{{.PGDATA}}/PG_VERSION" ]; then
          echo "ERROR: No PostgreSQL {{.TO}} cluster found at {{.PGDATA}}"
          exit 1
        fi
      - |
        # Verify PostgreSQL version
        VERSION=$(cat "{{.PGDATA}}/PG_VERSION")
        if [ "$VERSION" != "{{.TO}}" ]; then
          echo "ERROR: Expected PostgreSQL {{.TO}}, but found version $VERSION"
          exit 1
        fi
      - echo "✓ PostgreSQL {{.TO}} cluster verified at {{.PGDATA}}"
      - |
        # Start the new cluster temporarily for verification
        {{.PGBIN}}/pg_ctl -D "{{.PGDATA}}" -o "-p 5433" start -w || {
          echo "ERROR: Failed to start PostgreSQL {{.TO}} cluster"
          exit 1
        }
      - |
        # Verify database connectivity and run basic checks
        {{.PGBIN}}/psql -p 5433 -U {{.POSTGRES_USER}} -d postgres -c "SELECT version();" || {
          echo "ERROR: Cannot connect to upgraded PostgreSQL {{.TO}} cluster"
          {{.PGBIN}}/pg_ctl -D "{{.PGDATA}}" stop -w
          exit 1
        }
      - |
        # Check for any issues in the database
        {{.PGBIN}}/psql -p 5433 -U {{.POSTGRES_USER}} -d postgres -c "
          SELECT datname, encoding, datcollate, datctype 
          FROM pg_database 
          WHERE datname NOT IN ('template0', 'template1');" || {
          echo "WARNING: Could not list databases"
        }
      - |
        # Run vacuum analyze to update statistics
        {{.PGBIN}}/vacuumdb -p 5433 -U {{.POSTGRES_USER}} -a -z || {
          echo "WARNING: vacuum analyze failed"
        }
      - |
        # Stop the cluster
        {{.PGBIN}}/pg_ctl -D "{{.PGDATA}}" stop -w
      - echo "✓ Post-upgrade checks completed for PostgreSQL {{.TO}}"

  verify-final:
    desc: "Verify the final upgraded cluster"
    vars:
      PGBIN: '$PG{{.VERSION}}BIN'
      PGDATA: '$PG{{.VERSION}}DATA'
    cmds:
      - echo "Running final verification for PostgreSQL {{.VERSION}}..."
      - |
        # Verify final version
        if [ ! -f "{{.PGDATA}}/PG_VERSION" ]; then
          echo "ERROR: No PostgreSQL {{.VERSION}} cluster found"
          exit 1
        fi
      - |
        VERSION_FILE=$(cat "{{.PGDATA}}/PG_VERSION")
        if [ "$VERSION_FILE" != "{{.VERSION}}" ]; then
          echo "ERROR: Expected PostgreSQL {{.VERSION}}, but found version $VERSION_FILE"
          exit 1
        fi
      - |
        # Start cluster for final checks
        {{.PGBIN}}/pg_ctl -D "{{.PGDATA}}" -o "-p 5434" start -w || {
          echo "ERROR: Failed to start final PostgreSQL {{.VERSION}} cluster"
          exit 1
        }
      - |
        # Run comprehensive checks
        {{.PGBIN}}/psql -p 5434 -U {{.POSTGRES_USER}} -d postgres <<EOF
        SELECT version();
        SELECT pg_database_size(datname), datname FROM pg_database WHERE datname NOT IN ('template0', 'template1');
        SELECT count(*) as table_count FROM information_schema.tables WHERE table_schema NOT IN ('pg_catalog', 'information_schema');
        SELECT current_setting('server_version') as server_version, current_setting('server_version_num') as version_num;
        EOF
      - |
        # Check extensions
        {{.PGBIN}}/psql -p 5434 -U {{.POSTGRES_USER}} -d postgres -c "
          SELECT name, default_version, installed_version 
          FROM pg_available_extensions 
          WHERE installed_version IS NOT NULL;" || {
          echo "WARNING: Could not list extensions"
        }
      - |
        # Stop the cluster
        {{.PGBIN}}/pg_ctl -D "{{.PGDATA}}" stop -w
      - echo "✓ Final verification completed successfully!"
      - echo "✓ PostgreSQL has been successfully upgraded to version {{.VERSION}}"

  test-data-setup:
    desc: "Create test data in source PostgreSQL cluster"
    vars:
      PGBIN: '$PG{{.VERSION}}BIN'
      PGDATA: '$PG{{.VERSION}}DATA'
    cmds:
      - |
        # Start the cluster
        {{.PGBIN}}/pg_ctl -D "{{.PGDATA}}" -o "-p 5435" start -w
      - |
        # Create test database and data
        {{.PGBIN}}/createdb -p 5435 -U {{.POSTGRES_USER}} {{.POSTGRES_DB}} || true
        {{.PGBIN}}/psql -p 5435 -U {{.POSTGRES_USER}} -d {{.POSTGRES_DB}} <<EOF
        -- Create test tables
        CREATE TABLE IF NOT EXISTS users (
          id SERIAL PRIMARY KEY,
          username VARCHAR(50) UNIQUE NOT NULL,
          email VARCHAR(100) UNIQUE NOT NULL,
          created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        );
        
        CREATE TABLE IF NOT EXISTS products (
          id SERIAL PRIMARY KEY,
          name VARCHAR(100) NOT NULL,
          price DECIMAL(10,2) NOT NULL,
          stock INTEGER DEFAULT 0
        );
        
        CREATE TABLE IF NOT EXISTS orders (
          id SERIAL PRIMARY KEY,
          user_id INTEGER REFERENCES users(id),
          product_id INTEGER REFERENCES products(id),
          quantity INTEGER NOT NULL,
          order_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        );
        
        -- Insert test data
        INSERT INTO users (username, email) VALUES 
          ('user1', 'user1@example.com'),
          ('user2', 'user2@example.com'),
          ('user3', 'user3@example.com')
        ON CONFLICT DO NOTHING;
        
        INSERT INTO products (name, price, stock) VALUES 
          ('Product A', 19.99, 100),
          ('Product B', 29.99, 50),
          ('Product C', 39.99, 25)
        ON CONFLICT DO NOTHING;
        
        -- Create indexes
        CREATE INDEX IF NOT EXISTS idx_users_email ON users(email);
        CREATE INDEX IF NOT EXISTS idx_products_name ON products(name);
        CREATE INDEX IF NOT EXISTS idx_orders_date ON orders(order_date);
        
        -- Create a view
        CREATE OR REPLACE VIEW order_summary AS
        SELECT 
          o.id,
          u.username,
          p.name as product_name,
          o.quantity,
          p.price * o.quantity as total_price,
          o.order_date
        FROM orders o
        JOIN users u ON o.user_id = u.id
        JOIN products p ON o.product_id = p.id;
        
        -- Show summary
        SELECT 'Users' as table_name, COUNT(*) as row_count FROM users
        UNION ALL
        SELECT 'Products', COUNT(*) FROM products
        UNION ALL
        SELECT 'Orders', COUNT(*) FROM orders;
        EOF
      - |
        # Stop the cluster
        {{.PGBIN}}/pg_ctl -D "{{.PGDATA}}" stop -w
      - echo "✓ Test data setup completed"

  verify-test-data:
    desc: "Verify test data after upgrade"
    vars:
      PGBIN: '$PG{{.VERSION}}BIN'
      PGDATA: '$PG{{.VERSION}}DATA'
    cmds:
      - |
        # Start the cluster
        {{.PGBIN}}/pg_ctl -D "{{.PGDATA}}" -o "-p 5436" start -w
      - |
        # Verify test data
        {{.PGBIN}}/psql -p 5436 -U {{.POSTGRES_USER}} -d {{.POSTGRES_DB}} <<EOF
        -- Check table counts
        SELECT 'Users' as table_name, COUNT(*) as row_count FROM users
        UNION ALL
        SELECT 'Products', COUNT(*) FROM products
        UNION ALL
        SELECT 'Orders', COUNT(*) FROM orders;
        
        -- Check indexes
        SELECT schemaname, tablename, indexname 
        FROM pg_indexes 
        WHERE schemaname = 'public'
        ORDER BY tablename, indexname;
        
        -- Check view
        SELECT COUNT(*) as view_exists FROM information_schema.views 
        WHERE table_name = 'order_summary';
        
        -- Test data integrity
        SELECT COUNT(*) as constraint_count 
        FROM information_schema.table_constraints 
        WHERE constraint_schema = 'public';
        EOF
      - |
        # Stop the cluster
        {{.PGBIN}}/pg_ctl -D "{{.PGDATA}}" stop -w
      - echo "✓ Test data verification completed"