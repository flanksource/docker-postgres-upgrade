version: "3"

# GitHub Actions output grouping
output:
  group:
    begin: "::group::{{.TASK}}"
    end: "::endgroup::"

vars:
  TEST_DIR: ./test
  GO_TEST_FLAGS: -v -timeout 30m
  MINIMAL_IMAGE_NAME: postgres-minimal:latest

tasks:
  # Database seeding tasks
  seed-postgres:
    desc: Initialize and seed PostgreSQL {{.VERSION}} test data
    vars:
      VERSION: '{{.VERSION}}'
      VOLUME_NAME: 'pg{{.VERSION}}-test-data'
    cmds:
      - docker volume create {{.VOLUME_NAME}} || true
      - |
        docker run --rm \
          -v {{.VOLUME_NAME}}:/var/lib/postgresql/data \
          -v ./test/sql/seed-test-data.sql:/docker-entrypoint-initdb.d/01-seed.sql:ro \
          -e POSTGRES_PASSWORD=testpass \
          -e POSTGRES_DB=testdb \
          -e POSTGRES_USER=postgres \
          postgres:{{.VERSION}}-bookworm

  seed-pg14:
    desc: Seed PostgreSQL 14 test data
    cmds:
      - task: seed-postgres
        vars: {VERSION: "14"}

  seed-pg15:
    desc: Seed PostgreSQL 15 test data  
    cmds:
      - task: seed-postgres
        vars: {VERSION: "15"}

  seed-pg16:
    desc: Seed PostgreSQL 16 test data
    cmds:
      - task: seed-postgres
        vars: {VERSION: "16"}

  seed-pg17:
    desc: Seed PostgreSQL 17 test data
    cmds:
      - task: seed-postgres
        vars: {VERSION: "17"}

  seed-all:
    desc: Seed all PostgreSQL versions with test data
    cmds:
      - task: seed-pg14
      - task: seed-pg15
      - task: seed-pg16
      - task: seed-pg17

  # Docker image testing tasks
  test-image:
    desc: Build Docker image and run integration tests
    deps: [build]
    dir: "{{.TEST_DIR}}"
    cmds:
      - |
        echo "üß™ Running Docker image integration tests..."
        go test {{.GO_TEST_FLAGS}} -run TestPostgresIntegration

  # Integration testing tasks
  test-integration:
    desc: Run comprehensive integration tests
    dir: "{{.TEST_DIR}}"
    deps: [build]
    cmds:
      - |
        echo "üß™ Running comprehensive integration tests..."
        go test {{.GO_TEST_FLAGS}} -run TestPostgresIntegration


  test-extensions:
    desc: Test all PostgreSQL extensions functionality
    dir: "{{.TEST_DIR}}"
    deps: [build]
    cmds:
      - |
        echo "üß© Testing PostgreSQL extensions..."
        go test {{.GO_TEST_FLAGS}} -run "TestPostgresIntegration.*extension"

  test-services:
    desc: Test all integrated services (PgBouncer, PostgREST, WAL-G)
    dir: "{{.TEST_DIR}}"
    deps: [build]
    cmds:
      - |
        echo "‚öôÔ∏è Testing integrated services..."
        go test {{.GO_TEST_FLAGS}} -run "TestPostgresIntegration.*(PgBouncer|PostgREST|WAL)"


  test-enhanced:
    desc: Run enhanced integration tests (Kubernetes-based)
    dir: "{{.TEST_DIR}}"
    deps: [build]
    cmds:
      - |
        echo "üöÄ Running enhanced integration tests..."
        go test {{.GO_TEST_FLAGS}} -run TestEnhanced

  # Main test tasks using Go tests
  all:
    desc: Run all PostgreSQL tests (upgrades, integration, extensions)
    dir: "{{.TEST_DIR}}"
    deps: [build, seed-all]
    cmds:
      - |
        echo "üß™ Running all PostgreSQL tests..."
        go test {{.GO_TEST_FLAGS}} -run TestPostgresUpgrade
        go test {{.GO_TEST_FLAGS}} -run TestPostgresIntegration
        go test {{.GO_TEST_FLAGS}} -run TestEnhanced

  all-upgrades:
    desc: Run all PostgreSQL upgrade tests only
    dir: "{{.TEST_DIR}}"
    deps: [build, seed-all]
    cmds:
      - |
        echo "üß™ Running all PostgreSQL upgrade tests..."
        go test {{.GO_TEST_FLAGS}} -run TestPostgresUpgrade

  all-features:
    desc: Run all feature tests (extensions, services, integrations)
    deps: [test-integration, test-extensions, test-services, test-enhanced]
    cmds:
      - echo "‚úÖ All feature tests completed"


  upgrade-14-to-17:
    desc: Test upgrade from PostgreSQL 14 to 17
    dir: "{{.TEST_DIR}}"
    deps: [build, seed-pg14]
    cmds:
      - |
        echo "üß™ Testing upgrade from PostgreSQL 14 to 17..."
        go test {{.GO_TEST_FLAGS}} -run "TestPostgresUpgrade/Upgrade_14_to_17"

  upgrade-15-to-17:
    desc: Test upgrade from PostgreSQL 15 to 17
    dir: "{{.TEST_DIR}}"
    deps: [build, seed-pg15]
    cmds:
      - |
        echo "üß™ Testing upgrade from PostgreSQL 15 to 17..."
        go test {{.GO_TEST_FLAGS}} -run "TestPostgresUpgrade/Upgrade_15_to_17"

  upgrade-16-to-17:
    desc: Test upgrade from PostgreSQL 16 to 17
    dir: "{{.TEST_DIR}}"
    deps: [build, seed-pg16]
    cmds:
      - |
        echo "üß™ Testing upgrade from PostgreSQL 16 to 17..."
        go test {{.GO_TEST_FLAGS}} -run "TestPostgresUpgrade/Upgrade_16_to_17"

  upgrade-15-to-16:
    desc: Test upgrade from PostgreSQL 15 to 16
    dir: "{{.TEST_DIR}}"
    deps: [build, seed-pg15]
    cmds:
      - |
        echo "üß™ Testing upgrade from PostgreSQL 15 to 16..."
        go test {{.GO_TEST_FLAGS}} -run "TestPostgresUpgrade/Upgrade_15_to_16"

  # Quick test for development
  dev-test-quick:
    desc: Quick development test (14 to 17 upgrade only)
    dir: "{{.TEST_DIR}}"
    deps: [build, seed-pg14]
    cmds:
      - |
        echo "‚ö° Running quick test..."
        go test {{.GO_TEST_FLAGS}} -run TestPostgresUpgradeQuick

  # Build task
  build:
    desc: Build the flanksource/postgres Docker image
    cmds:
      - task build:build

  # Status task using Go test
  status:
    desc: Show status of volumes and images
    dir: "{{.TEST_DIR}}"
    cmds:
      - |
        echo "üìä Checking Docker resources status..."
        go test {{.GO_TEST_FLAGS}} -run TestShowUpgradeStatus

  # Test coverage and reporting
  test-coverage:
    desc: Run tests with coverage report
    dir: "{{.TEST_DIR}}"
    deps: [build]
    cmds:
      - |
        echo "üìä Running tests with coverage..."
        go test -coverprofile=coverage.out {{.GO_TEST_FLAGS}} ./...
        go tool cover -html=coverage.out -o coverage.html
        echo "‚úÖ Coverage report generated: test/coverage.html"

  test-report:
    desc: Generate test report
    dir: "{{.TEST_DIR}}"
    deps: [build]
    cmds:
      - |
        echo "üìä Generating test report..."
        go test {{.GO_TEST_FLAGS}} -json ./... | tee test-report.json
        echo "‚úÖ Test report generated: test/test-report.json"

  # CI/CD specific tasks
  ci-test:
    desc: Run tests in CI environment
    dir: "{{.TEST_DIR}}"
    deps: [build]
    env:
      CI: "true"
    cmds:
      - |
        echo "ü§ñ Running tests in CI mode..."
        go test {{.GO_TEST_FLAGS}} -json ./... | tee test-results.json
        # Generate JUnit XML for CI systems
        go install github.com/jstemmer/go-junit-report/v2@latest
        cat test-results.json | go-junit-report -out junit.xml
        echo "‚úÖ Test results saved to test/junit.xml"

  # Clean task
  # Utility and maintenance tasks



  clean:
    desc: Clean up test resources and Docker volumes
    cmds:
      - |
        echo "üßπ Cleaning up test resources..."
        docker stop postgres-integration-test postgres-upgrade-test || true
        docker rm postgres-integration-test postgres-upgrade-test || true
        docker volume prune -f --filter label=cleanup=test || true
        docker system prune -f || true
        echo "‚úÖ Cleanup completed"

  # Help task
  help:
    desc: Show available tasks and usage examples
    cmds:
      - task --list
      - |
        echo ""
        echo "üìö Usage Examples:"
        echo "  task test:all                    # Run all tests (upgrades + features)"
        echo "  task test:test-image             # Build and test Docker image"
        echo "  task test:test-integration       # Run integration tests"
        echo "  task test:test-extensions        # Test PostgreSQL extensions"
        echo "  task test:test-services          # Test integrated services"
        echo "  task test:clean                  # Clean up test resources"

  # Minimal image test tasks
  build-minimal:
    desc: Build the minimal PostgreSQL image
    cmds:
      - task build:build-minimal

  test-minimal-basic:
    desc: Test minimal image basic functionality
    deps: [build-minimal]
    cmds:
      - |
        echo "üß™ Testing minimal image basic functionality..."
        # Start container
        docker run -d --name postgres-minimal-test \
          -e POSTGRES_PASSWORD=testpass \
          -e POSTGRES_DB=testdb \
          -e PG_VERSION=17 \
          {{.MINIMAL_IMAGE_NAME}}

        # Wait for PostgreSQL to be ready
        sleep 15

        # Test basic operations
        docker exec postgres-minimal-test psql -U postgres -d testdb -c "
          CREATE TABLE test (id SERIAL PRIMARY KEY, data TEXT);
          INSERT INTO test (data) VALUES ('test1'), ('test2'), ('test3');
          SELECT COUNT(*) FROM test;
        "

        # Test basic contrib extensions
        docker exec postgres-minimal-test psql -U postgres -d testdb -c "
          CREATE EXTENSION IF NOT EXISTS pgcrypto;
          CREATE EXTENSION IF NOT EXISTS pg_stat_statements;
          SELECT * FROM pg_available_extensions WHERE name IN ('pgcrypto', 'pg_stat_statements');
        "

        # Cleanup
        docker stop postgres-minimal-test
        docker rm postgres-minimal-test
        echo "‚úÖ Basic functionality test passed"

  test-minimal-pgconfig:
    desc: Test minimal image pgconfig CLI
    deps: [build-minimal]
    cmds:
      - |
        echo "üß™ Testing pgconfig CLI..."
        # Start container
        docker run -d --name postgres-minimal-pgconfig \
          -e POSTGRES_PASSWORD=testpass \
          -e PG_VERSION=17 \
          {{.MINIMAL_IMAGE_NAME}}

        # Wait for PostgreSQL to be ready
        sleep 15

        # Test pgconfig functionality
        docker exec postgres-minimal-pgconfig pgconfig --help

        # Cleanup
        docker stop postgres-minimal-pgconfig
        docker rm postgres-minimal-pgconfig
        echo "‚úÖ pgconfig CLI test passed"

  test-minimal-upgrade:
    desc: Test minimal image upgrade from {{.FROM}} to {{.TO}}
    deps: [build-minimal]
    vars:
      FROM: '{{.FROM | default "14"}}'
      TO: '{{.TO | default "17"}}'
    cmds:
      - |
        echo "üß™ Testing upgrade from PostgreSQL {{.FROM}} to {{.TO}}..."

        # Create test data directory
        mkdir -p test-data-minimal/pg{{.FROM}}
        chmod 777 test-data-minimal/pg{{.FROM}}

        # Initialize PostgreSQL {{.FROM}} with test data
        docker run --rm \
          -v $PWD/test-data-minimal/pg{{.FROM}}:/var/lib/postgresql/data \
          -e POSTGRES_PASSWORD=testpass \
          -e POSTGRES_DB=testdb \
          postgres:{{.FROM}}-bookworm \
          bash -c "
            docker-entrypoint.sh postgres &
            PGPID=\$!
            sleep 10

            # Create test data
            psql -U postgres -d testdb <<EOF
        CREATE TABLE test_data (
          id SERIAL PRIMARY KEY,
          data TEXT,
          created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        );

        INSERT INTO test_data (data)
        SELECT 'Test record ' || generate_series(1, 1000);

        CREATE INDEX idx_test_data ON test_data(created_at);

        SELECT COUNT(*) as record_count FROM test_data;
        EOF

            # Stop PostgreSQL
            pg_ctl -D /var/lib/postgresql/data stop -m smart -w
          "

        # Run upgrade
        docker run --rm \
          -v $PWD/test-data-minimal/pg{{.FROM}}:/var/lib/postgresql/data \
          -e POSTGRES_INITDB_ARGS="--auth-local=trust --auth-host=md5" \
          -e PG_VERSION={{.TO}} \
          {{.MINIMAL_IMAGE_NAME}}

        # Verify upgraded data
        docker run --rm \
          -v $PWD/test-data-minimal/pg{{.FROM}}:/var/lib/postgresql/data \
          -e POSTGRES_PASSWORD=testpass \
          postgres:{{.TO}}-bookworm \
          bash -c "
            docker-entrypoint.sh postgres &
            PGPID=\$!
            sleep 10

            # Verify data
            psql -U postgres -d testdb <<EOF
        SELECT COUNT(*) as record_count FROM test_data;
        SELECT indexname FROM pg_indexes WHERE tablename = 'test_data';
        SELECT
          CASE
            WHEN COUNT(*) = 1000 THEN 'PASS: All records present'
            ELSE 'FAIL: Expected 1000 records, found ' || COUNT(*)
          END as result
        FROM test_data;
        EOF

            # Stop PostgreSQL
            pg_ctl -D /var/lib/postgresql/data stop -m smart -w
          "

        # Cleanup
        rm -rf test-data-minimal/pg{{.FROM}}
        echo "‚úÖ Upgrade test passed"

  test-minimal-14-to-17:
    desc: Test minimal image upgrade from PostgreSQL 14 to 17
    cmds:
      - task: test-minimal-upgrade
        vars: { FROM: "14", TO: "17" }

  test-minimal-15-to-17:
    desc: Test minimal image upgrade from PostgreSQL 15 to 17
    cmds:
      - task: test-minimal-upgrade
        vars: { FROM: "15", TO: "17" }

  test-minimal-16-to-17:
    desc: Test minimal image upgrade from PostgreSQL 16 to 17
    cmds:
      - task: test-minimal-upgrade
        vars: { FROM: "16", TO: "17" }

  test-minimal-all-upgrades:
    desc: Test all minimal image upgrade paths
    deps: [build-minimal]
    cmds:
      - task: test-minimal-14-to-17
      - task: test-minimal-15-to-17
      - task: test-minimal-16-to-17

  test-minimal-all:
    desc: Run all minimal image tests
    deps: [build-minimal]
    cmds:
      - task: test-minimal-basic
      - task: test-minimal-pgconfig
      - task: test-minimal-all-upgrades
      - echo "‚úÖ All minimal image tests completed"

  clean-minimal:
    desc: Clean up minimal image test resources
    cmds:
      - |
        echo "üßπ Cleaning up minimal image test resources..."
        docker stop postgres-minimal-test postgres-minimal-pgconfig 2>/dev/null || true
        docker rm postgres-minimal-test postgres-minimal-pgconfig 2>/dev/null || true
        rm -rf test-data-minimal/
        echo "‚úÖ Cleanup completed"
