version: "3"

# GitHub Actions output grouping when GITHUB_ACTIONS=true or CI=true
output:
  group:
    begin: "::group::{{.TASK}}"
    end: "::endgroup::"

includes:
  build: ./Taskfile.build.yaml
  test: ./Taskfile.test.yaml
  run: ./Taskfile.run.yaml

# Default tasks that delegate to included files
tasks:
  default:
    desc: Auto-detect PostgreSQL version and upgrade to PG_VERSION target (default 17)
    cmds:
      - task: run:auto-upgrade

  # Build shortcuts
  build:
    desc: Build the postgres-upgrade Docker image
    cmds:
      - task: build:build

  build-all:
    desc: Build all target version images
    cmds:
      - task: build:build-all

  # Test shortcuts
  test:
    desc: Test all PostgreSQL upgrades
    cmds:
      - task: build:build
      - task: test:all

  test-image:
    desc: Build and test Docker image with integration tests
    cmds:
      - task: test:test-image

  clean:
    desc: Clean up everything
    cmds:
      - task: test:clean

  status:
    desc: Show status of volumes and images
    cmds:
      - task: test:status

  # Development shortcuts
  dev-setup:
    desc: Set up development environment
    cmds:
      - task: build:build
      - task: test:dev-setup

  dev-test-quick:
    desc: Quick development test (14 to 17 upgrade only)
    cmds:
      - task: build:build
      - task: test:dev-test-quick

  # Upgrade shortcuts (for running inside container)
  auto-upgrade:
    desc: Auto-detect and upgrade PostgreSQL (with password reset if needed)
    cmds:
      - task: run:auto-upgrade

  reset-password:
    desc: Reset PostgreSQL password if RESET_PASSWORD=true
    cmds:
      - task: run:reset-password

  upgrade-single:
    desc: Perform single PostgreSQL upgrade
    cmds:
      - task: run:upgrade-single

  upgrade-from-env:
    desc: Upgrade using environment variables
    cmds:
      - task: run:upgrade-from-env

  # Extension management tasks
  extensions-list:
    desc: List all available PostgreSQL extensions
    cmds:
      - echo "Available PostgreSQL Extensions:"
      - echo "================================"
      - echo "pgvector          - Vector similarity search"
      - echo "pgsodium          - Modern cryptography"
      - echo "pgjwt             - JSON Web Token support"
      - echo "pgaudit           - PostgreSQL audit logging"
      - echo "pg_tle            - Trusted Language Extensions"
      - echo "pg_stat_monitor   - Query performance monitoring"
      - echo "pg_repack         - Table reorganization"
      - echo "pg_plan_filter    - Query plan filtering"
      - echo "pg_net            - Async networking"
      - echo "pg_jsonschema     - JSON schema validation"
      - echo "pg_hashids        - Short unique ID generation"
      - echo "pg_cron           - Job scheduler"
      - echo "pg-safeupdate     - Require WHERE clause in DELETE/UPDATE"
      - echo "index_advisor     - Index recommendations"
      - echo "wal2json          - WAL to JSON converter"

  extensions-install:
    desc: Install extensions in a running container (EXTENSIONS=ext1,ext2,...)
    cmds:
      - |
        if [ -z "{{.EXTENSIONS}}" ]; then
          echo "Usage: task extensions-install EXTENSIONS=pgvector,pgaudit,pg_cron"
          exit 1
        fi
        echo "Installing extensions: {{.EXTENSIONS}}"
        docker exec -e POSTGRES_EXTENSIONS="{{.EXTENSIONS}}" postgres-container /docker-entrypoint.sh init_extensions

  # Service management tasks
  services-status:
    desc: Show status of all services (PostgreSQL, PgBouncer, PostgREST, WAL-G)
    cmds:
      - echo "Service Status:"
      - echo "==============="
      - docker exec postgres-container s6-svstat /var/run/s6/services/* 2>/dev/null || echo "Container not running or s6 not enabled"

  services-logs:
    desc: Show logs for a specific service (SERVICE=postgresql|pgbouncer|postgrest|wal-g)
    cmds:
      - |
        if [ -z "{{.SERVICE}}" ]; then
          echo "Usage: task services-logs SERVICE=postgresql|pgbouncer|postgrest|wal-g"
          exit 1
        fi
        docker exec postgres-container s6-svlogd-tail /var/run/s6/services/{{.SERVICE}}/log 2>/dev/null || echo "Service logs not available"

  # Backup and restore tasks
  backup-create:
    desc: Create a WAL-G backup (requires WAL-G to be enabled)
    cmds:
      - docker exec postgres-container wal-g backup-push /var/lib/postgresql/data/pgdata

  backup-list:
    desc: List available WAL-G backups
    cmds:
      - docker exec postgres-container wal-g backup-list

  backup-restore:
    desc: Restore from WAL-G backup (BACKUP_NAME=backup-name)
    cmds:
      - |
        if [ -z "{{.BACKUP_NAME}}" ]; then
          echo "Usage: task backup-restore BACKUP_NAME=backup-20231201T120000Z"
          exit 1
        fi
        docker exec postgres-container wal-g backup-fetch /var/lib/postgresql/data/pgdata {{.BACKUP_NAME}}

  # Help task
  help:
    desc: Show detailed help for all tasks
    cmds:
      - echo "PostgreSQL Upgrade Docker Container - Task Runner"
      - echo "================================================"
      - 'echo ""'
      - echo "Main Tasks (Container):"
      - echo "  task (default)          - Auto-detect current PostgreSQL version and upgrade to target"
      - echo "  task auto-upgrade       - Same as default - auto-detect and upgrade with password reset"
      - echo "  task reset-password     - Reset PostgreSQL password (if RESET_PASSWORD=true)"
      - 'echo ""'
      - echo "Environment Variables:"
      - 'echo "  PG_VERSION=17           - Target PostgreSQL version (default: 17)"'
      - 'echo "  AUTO_UPGRADE=false      - Disable auto-upgrade (default: true)"'
      - 'echo "  RESET_PASSWORD=true     - Reset password on startup (default: false)"'
      - 'echo "  POSTGRES_PASSWORD=...   - New password for reset"'
      - 'echo "  POSTGRES_USER=postgres  - User for password reset (default: postgres)"'
      - 'echo "  START_POSTGRES=true     - Start PostgreSQL after upgrade (default: false)"'
      - 'echo ""'
      - echo "Build Tasks:"
      - echo "  task build              - Build the default postgres-upgrade image"
      - echo "  task build:build-15     - Build image that upgrades to PostgreSQL 15"
      - echo "  task build:build-16     - Build image that upgrades to PostgreSQL 16"
      - echo "  task build:build-17     - Build image that upgrades to PostgreSQL 17"
      - echo "  task build:build-all    - Build all target version images"
      - 'echo ""'
      - echo "Test Tasks:"
      - echo "  task test               - Run all upgrade tests"
      - echo "  task test:seed-all      - Seed all test volumes"
      - echo "  task test:upgrade-14-to-17 - Test PostgreSQL 14 to 17 upgrade"
      - echo "  task test:upgrade-15-to-17 - Test PostgreSQL 15 to 17 upgrade"
      - echo "  task test:upgrade-16-to-17 - Test PostgreSQL 16 to 17 upgrade"
      - 'echo ""'
      - echo "Extension Tasks:"
      - echo "  task extensions-list    - List all available PostgreSQL extensions"
      - echo "  task extensions-install - Install extensions (EXTENSIONS=ext1,ext2,...)"
      - 'echo ""'
      - echo "Service Management Tasks:"
      - echo "  task services-status    - Show status of all services"
      - echo "  task services-logs      - Show logs for specific service (SERVICE=name)"
      - 'echo ""'
      - echo "Backup Tasks (WAL-G):"
      - echo "  task backup-create      - Create a new backup"
      - echo "  task backup-list        - List available backups"
      - echo "  task backup-restore     - Restore from backup (BACKUP_NAME=name)"
      - 'echo ""'
      - echo "Utility Tasks:"
      - echo "  task clean              - Clean up volumes and images"
      - echo "  task status             - Show status of volumes and images"
      - echo "  task dev-setup          - Set up development environment"
      - echo "  task dev-test-quick     - Quick test (14 to 17 only)"
      - 'echo ""'
      - echo "Legacy Tasks (Advanced):"
      - 'echo "  task upgrade-single     - Perform single version upgrade (FROM= TO=)"'
      - 'echo "  task upgrade-from-env   - Upgrade using FROM/TO environment variables"'
      - 'echo ""'
      - 'echo "For more details on any task, run: task --summary <task-name>"'
