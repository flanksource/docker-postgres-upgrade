version: "3"

# GitHub Actions output grouping
output:
  group:
    begin: "::group::{{.TASK}}"
    end: "::endgroup::"

vars:
  SCHEMA_FILE: "schema/pgconfig-schema.json"
  GENERATED_FILE: "pkg/model_generated.go"
  GENERATOR_SCRIPT: "hack/generate-structs.go"

tasks:
  generate-schema:
    generates:
      - "{{.SCHEMA_FILE}}"
    cmds:
      - echo "Generating JSON schema..."
      - go run hack/generate-schema.go
      - "echo ‚úÖ Generated JSON schema: {{.SCHEMA_FILE}}"

  generate-structs:
    desc: Generate Go structs from JSON schema with custom type processing
    sources:
      - "{{.SCHEMA_FILE}}"
      - "hack/generate-structs.go"
      - "pkg/generators/schema_generator.go"
    generates:
      - "{{.GENERATED_FILE}}"
    cmds:
      - echo "Generating Go structs from JSON schema with type detection..."
      - go run hack/generate-structs.go
      - "echo ‚úÖ Generated structs with custom types: {{.GENERATED_FILE}}"

  validate-schema:
    desc: Validate the JSON schema file
    sources:
      - "{{.SCHEMA_FILE}}"
    cmds:
      - echo "Validating JSON schema..."
      - |
        if ! command -v jsonschema >/dev/null 2>&1; then
          echo "Installing jsonschema validation tool..."
          pip3 install jsonschema[format] 2>/dev/null || pip install jsonschema[format] || echo "Warning: jsonschema tool not available"
        fi
      - |
        if command -v jsonschema >/dev/null 2>&1; then
          jsonschema --instance {{.SCHEMA_FILE}} --validator meta-schema || echo "Schema validation with jsonschema tool failed"
        else
          echo "‚ö†Ô∏è  jsonschema tool not available, skipping validation"
        fi
      - echo "‚úÖ Schema validation completed"

  build-pgconfig:
    desc: Build the pgconfig CLI tool
    deps:
      - generate-structs
    sources:
      - "cmd/pgconfig/**/*.go"
      - "pkg/**/*.go"
    generates:
      - "pgconfig"
    cmds:
      - echo "Building pgconfig CLI tool..."
      - go build -o pgconfig ./cmd/pgconfig
      - echo "‚úÖ Built pgconfig CLI tool"
    method: timestamp

  test-config:
    desc: Run configuration tests
    deps:
      - generate-structs
    cmds:
      - echo "Running configuration tests..."
      - go test ./pkg -v -run "TestConfig|TestLoad|TestGenerate|TestSchema|TestValidation"
      - echo "‚úÖ Configuration tests passed"

  test-config-integration:
    desc: Run configuration integration tests
    deps:
      - build-pgconfig
    cmds:
      - echo "Running configuration integration tests..."
      - go test ./test -v -run "TestConfig.*Integration" || echo "Integration tests not yet implemented"
      - echo "‚úÖ Configuration integration tests completed"

  test-all:
    desc: Run all configuration-related tests
    deps:
      - validate-schema
      - generate-structs
    cmds:
      - task: test-config
      - task: test-config-integration

  clean-generated:
    desc: Remove generated configuration files
    cmds:
      - echo "Cleaning generated configuration files..."
      - rm -f {{.GENERATED_FILE}}
      - rm -f pgconfig
      - echo "‚úÖ Cleaned generated files"

  generate-test-configs:
    desc: Generate test configuration files using pgconfig CLI
    deps:
      - build-pgconfig
    cmds:
      - echo "Generating test configuration files..."
      - mkdir -p test/generated-configs
      - ./pgconfig generate --output-dir test/generated-configs --validate
      - echo "‚úÖ Generated test configurations in test/generated-configs/"

  validate-generated-configs:
    desc: Validate generated configuration files
    deps:
      - generate-test-configs
    cmds:
      - echo "Validating generated configuration files..."
      - ./pgconfig validate postgres --file test/generated-configs/postgresql.conf
      - ./pgconfig validate pgbouncer --file test/generated-configs/pgbouncer.ini
      - ./pgconfig validate postgrest --file test/generated-configs/postgrest.conf
      - echo "‚úÖ All generated configurations are valid"

  lint-config:
    desc: Lint configuration-related Go code
    cmds:
      - echo "Linting configuration code..."
      - gofmt -l pkg/config.go pkg/utils/defaults.go || echo "Formatting issues found"
      - go vet ./pkg/config.go ./pkg/utils/defaults.go
      - echo "‚úÖ Configuration code linting completed"

  benchmark-config:
    desc: Run configuration loading benchmarks
    deps:
      - generate-structs
    cmds:
      - echo "Running configuration loading benchmarks..."
      - go test -bench=BenchmarkConfig -benchmem ./pkg
      - echo "‚úÖ Configuration benchmarks completed"

  check-dependencies:
    desc: Check that all required dependencies are available
    cmds:
      - echo "Checking configuration generation dependencies..."
      - go version
      - |
        if ! go list github.com/atombender/go-jsonschema >/dev/null 2>&1; then
          echo "‚ùå go-jsonschema not available"
          exit 1
        fi
      - |
        if ! go list github.com/xeipuuv/gojsonschema >/dev/null 2>&1; then
          echo "‚ùå gojsonschema not available"
          exit 1
        fi
      - echo "‚úÖ All dependencies available"

  help:
    desc: Show help for pgconfig tasks
    cmds:
      - echo "PGConfig Build Tasks:"
      - echo "====================="
      - echo ""
      - echo "Generation Tasks:"
      - echo "  generate-structs       - Generate Go structs from JSON schema"
      - echo "  validate-schema        - Validate the JSON schema file"
      - echo "  build-pgconfig         - Build the pgconfig CLI tool"
      - echo ""
      - echo "Testing Tasks:"
      - echo "  test-config            - Run configuration unit tests"
      - echo "  test-config-integration- Run configuration integration tests"
      - echo "  test-all               - Run all configuration tests"
      - echo ""
      - echo "Validation Tasks:"
      - echo "  generate-test-configs  - Generate test configuration files"
      - echo "  validate-generated-configs - Validate generated configurations"
      - echo ""
      - echo "Utility Tasks:"
      - echo "  clean-generated        - Remove generated files"
      - echo "  lint-config           - Lint configuration code"
      - echo "  benchmark-config      - Run configuration benchmarks"
      - echo "  check-dependencies    - Check required dependencies"
      - echo "  help                  - Show this help message"

  # Main workflow task that runs the complete pipeline
  ci:
    desc: Run complete CI pipeline for configuration system
    cmds:
      - task: check-dependencies
      - task: validate-schema
      - task: generate-structs
      - task: lint-config
      - task: test-all
      - task: validate-generated-configs
      - echo "üéâ Configuration CI pipeline completed successfully"
