version: "3"

# Binary Installation Taskfile using eget
# Handles GitHub releases for Task, PostgREST, and WAL-G

vars:
  # Version variables for easy updates (can be overridden)
  EGET_VERSION: 1.3.4
  TASK_VERSION: 3.44.1
  POSTGREST_VERSION: '{{.POSTGREST_VERSION | default "12.2.3"}}'
  WALG_VERSION: '{{.WALG_VERSION | default "3.0.5"}}'
  TARGET_BIN: '{{.TARGET_BIN | default "/usr/local/bin"}}'

  # Architecture detection
  ARCH:
    sh: |
      if command -v dpkg >/dev/null 2>&1; then
        dpkg --print-architecture
      else
        # Fallback for non-Debian systems (macOS, etc.)
        case $(uname -m) in
          x86_64) echo "amd64" ;;
          arm64) echo "arm64" ;;
          aarch64) echo "arm64" ;;
          *) echo "amd64" ;;
        esac
      fi

tasks:
  # Bootstrap eget for downloading GitHub releases
  install-eget:
    desc: Install eget for downloading GitHub releases
    cmds:
      - |
        # Create target directory
        mkdir -p {{.TARGET_BIN}}
        
        # Detect OS
        OS=$(uname -s | tr '[:upper:]' '[:lower:]')
        case $OS in
          linux) OS_NAME="linux" ;;
          darwin) OS_NAME="darwin" ;;
          *) OS_NAME="linux" ;;
        esac
        
        EGET_URL="https://github.com/zyedidia/eget/releases/download/v{{.EGET_VERSION}}/eget-{{.EGET_VERSION}}-${OS_NAME}_{{.ARCH}}.tar.gz"
        echo "Downloading eget from: $EGET_URL"
        
        # Download and extract to a temporary directory
        TEMP_DIR="/tmp/eget-install-$$"
        mkdir -p "$TEMP_DIR"
        curl -fsSL "${EGET_URL}" | tar -xzC "$TEMP_DIR"
        
        # Find the eget binary (it might be in a subdirectory)
        EGET_BINARY=$(find "$TEMP_DIR" -name "eget" -type f | head -1)
        if [ -z "$EGET_BINARY" ]; then
          echo "Error: eget binary not found in downloaded archive"
          ls -laR "$TEMP_DIR"
          rm -rf "$TEMP_DIR"
          exit 1
        fi
        
        # Install the binary
        if command -v install >/dev/null 2>&1; then
          install "$EGET_BINARY" {{.TARGET_BIN}}/eget
        else
          cp "$EGET_BINARY" {{.TARGET_BIN}}/eget
          chmod +x {{.TARGET_BIN}}/eget
        fi
        rm -rf "$TEMP_DIR"
        echo "Successfully installed eget to {{.TARGET_BIN}}/eget"
    status:
      - test -x {{.TARGET_BIN}}/eget

  # Install Task using eget
  install-task:
    desc: Install Task using eget
    deps: [install-eget]
    cmds:
      - eget go-task/task --tag v{{.TASK_VERSION}} --asset "*.tar.gz" --to {{.TARGET_BIN}}
    status:
      - test -x {{.TARGET_BIN}}/task

  # Install PostgREST using eget
  install-postgrest:
    desc: Install PostgREST using eget
    deps: [install-eget]
    cmds:
      - |
        mkdir -p {{.TARGET_BIN}}
        eget PostgREST/postgrest --tag v{{.POSTGREST_VERSION}} --to {{.TARGET_BIN}}/postgrest
        chmod +x {{.TARGET_BIN}}/postgrest
    status:
      - test -x {{.TARGET_BIN}}/postgrest

  # Install WAL-G using eget
  install-walg:
    desc: Install WAL-G using eget
    deps: [install-eget]
    cmds:
      - eget wal-g/wal-g --tag v{{.WALG_VERSION}} --asset "wal-g-pg-ubuntu-20.04" --asset '{{.ARCH | replace "arm64" "aarch64" }}' --asset "tar.gz" --to {{.TARGET_BIN}}/wal-g
    status:
      - test -x {{.TARGET_BIN}}/wal-g

  # Install all binaries
  install-all:
    desc: Install all binary tools
    cmds:
      - task: install-eget
      - task: install-task
      - task: install-postgrest
      - task: install-walg

  # Verify installations
  verify:
    desc: Verify all binaries are installed and working
    cmds:
      - |
        echo "=== Binary Installation Verification ==="
        echo -n "eget: "; eget --version || echo "❌ NOT FOUND"
        echo -n "task: "; task --version || echo "❌ NOT FOUND"
        echo -n "postgrest: "; postgrest --version || echo "❌ NOT FOUND"
        echo -n "wal-g: "; wal-g --version || echo "❌ NOT FOUND"
        echo -n "supervisord: "; supervisord --version || echo "❌ NOT FOUND"
        echo "=== Verification Complete ==="

  # Clean up temporary files
  cleanup:
    desc: Clean up temporary installation files
    cmds:
      - rm -rf /tmp/eget* /tmp/*.tar.gz /tmp/*.tar.xz
