package generators

import (
	"fmt"
	"strings"
	"time"

	"github.com/flanksource/postgres/pkg"
)

// PGAuditConfigGenerator generates postgres.pgaudit.conf configuration
type PGAuditConfigGenerator struct {
	PGAuditConf *pkg.PGAuditConf
}

// NewPGAuditConfigGenerator creates a new PGAudit configuration generator
func NewPGAuditConfigGenerator(conf *pkg.PGAuditConf) *PGAuditConfigGenerator {
	return &PGAuditConfigGenerator{
		PGAuditConf: conf,
	}
}

// GenerateConfigFile generates the postgres.pgaudit.conf file content
func (g *PGAuditConfigGenerator) GenerateConfigFile() string {
	var sb strings.Builder

	// File header
	sb.WriteString("# PostgreSQL PGAudit Configuration\n")
	sb.WriteString("# Generated by pgconfig on " + time.Now().Format("2006-01-02 15:04:05") + "\n")
	sb.WriteString("# This file contains PGAudit extension configuration\n")
	sb.WriteString("#\n")
	sb.WriteString("# PGAudit provides detailed session and/or object audit logging via\n")
	sb.WriteString("# the standard PostgreSQL logging facility.\n")
	sb.WriteString("#\n")
	sb.WriteString("# Documentation: https://github.com/pgaudit/pgaudit\n")
	sb.WriteString("\n")

	// Add configuration sections
	g.addAuditLoggingSection(&sb)
	g.addLogControlSection(&sb)
	g.addObjectAuditSection(&sb)

	return sb.String()
}

func (g *PGAuditConfigGenerator) addAuditLoggingSection(sb *strings.Builder) {
	sb.WriteString("#------------------------------------------------------------------------------\n")
	sb.WriteString("# AUDIT LOGGING\n")
	sb.WriteString("#------------------------------------------------------------------------------\n")
	sb.WriteString("\n")

	// pgaudit.log with detailed description from model
	sb.WriteString(FormatConfigComment("pgaudit.log", "#"))
	sb.WriteString("\n")
	if g.PGAuditConf.Log != "" && g.PGAuditConf.Log != "none" {
		sb.WriteString(fmt.Sprintf("pgaudit.log = '%s'\n", g.PGAuditConf.Log))
	} else {
		sb.WriteString("# pgaudit.log = 'none'\n")
	}
	sb.WriteString("\n")

	// pgaudit.log_catalog with description from model
	sb.WriteString(FormatConfigComment("pgaudit.log_catalog", "#"))
	sb.WriteString("\n")
	if g.PGAuditConf.LogCatalog != "" && g.PGAuditConf.LogCatalog != "on" {
		sb.WriteString(fmt.Sprintf("pgaudit.log_catalog = %s\n", g.PGAuditConf.LogCatalog))
	} else {
		sb.WriteString("# pgaudit.log_catalog = on\n")
	}
	sb.WriteString("\n")

	// pgaudit.log_parameter with description from model
	sb.WriteString(FormatConfigComment("pgaudit.log_parameter", "#"))
	sb.WriteString("\n")
	if g.PGAuditConf.LogParameter != "" && g.PGAuditConf.LogParameter != "off" {
		sb.WriteString(fmt.Sprintf("pgaudit.log_parameter = %s\n", g.PGAuditConf.LogParameter))
	} else {
		sb.WriteString("# pgaudit.log_parameter = off\n")
	}
	sb.WriteString("\n")

	// pgaudit.log_parameter_max_size with description from model
	if g.PGAuditConf.LogParameterMaxSize != "" && g.PGAuditConf.LogParameterMaxSize != "0" {
		sb.WriteString(FormatConfigComment("pgaudit.log_parameter_max_size", "#"))
		sb.WriteString("\n")
		sb.WriteString(fmt.Sprintf("pgaudit.log_parameter_max_size = %s\n", g.PGAuditConf.LogParameterMaxSize))
		sb.WriteString("\n")
	}

	// pgaudit.log_statement with description from model
	sb.WriteString(FormatConfigComment("pgaudit.log_statement", "#"))
	sb.WriteString("\n")
	if g.PGAuditConf.LogStatement != "" && g.PGAuditConf.LogStatement != "on" {
		sb.WriteString(fmt.Sprintf("pgaudit.log_statement = %s\n", g.PGAuditConf.LogStatement))
	} else {
		sb.WriteString("# pgaudit.log_statement = on\n")
	}
	sb.WriteString("\n")

	// pgaudit.log_statement_once
	if g.PGAuditConf.LogStatementOnce != "" && g.PGAuditConf.LogStatementOnce != "off" {
		sb.WriteString("# Log statement text only once - avoid logging statement text multiple times.\n")
		sb.WriteString(fmt.Sprintf("pgaudit.log_statement_once = %s\n", g.PGAuditConf.LogStatementOnce))
		sb.WriteString("\n")
	}
}

func (g *PGAuditConfigGenerator) addLogControlSection(sb *strings.Builder) {
	sb.WriteString("#------------------------------------------------------------------------------\n")
	sb.WriteString("# LOG CONTROL\n")
	sb.WriteString("#------------------------------------------------------------------------------\n")
	sb.WriteString("\n")

	// pgaudit.log_level
	sb.WriteString("# Log level for audit entries.\n")
	sb.WriteString("# Valid values: DEBUG1, DEBUG2, DEBUG3, DEBUG4, DEBUG5, INFO, NOTICE, WARNING, LOG\n")
	sb.WriteString("# Note: ERROR, FATAL, and PANIC are not allowed.\n")
	if g.PGAuditConf.LogLevel != "" && g.PGAuditConf.LogLevel != "log" {
		sb.WriteString(fmt.Sprintf("pgaudit.log_level = %s\n", strings.ToUpper(string(g.PGAuditConf.LogLevel))))
	} else {
		sb.WriteString("# pgaudit.log_level = LOG\n")
	}
	sb.WriteString("\n")

	// pgaudit.log_client
	sb.WriteString("# Log to client - send audit log entries to the client in addition to the log.\n")
	sb.WriteString("# This setting should generally be left disabled for security reasons.\n")
	if g.PGAuditConf.LogClient != "" && g.PGAuditConf.LogClient != "off" {
		sb.WriteString(fmt.Sprintf("pgaudit.log_client = %s\n", g.PGAuditConf.LogClient))
	} else {
		sb.WriteString("# pgaudit.log_client = off\n")
	}
	sb.WriteString("\n")

	// pgaudit.log_relation
	if g.PGAuditConf.LogRelation != "" && g.PGAuditConf.LogRelation != "off" {
		sb.WriteString("# Log relation - create separate audit log entries for each relation referenced.\n")
		sb.WriteString(fmt.Sprintf("pgaudit.log_relation = %s\n", g.PGAuditConf.LogRelation))
		sb.WriteString("\n")
	}

	// pgaudit.log_rows - Note: LogRows field not available in current schema
	// This functionality has been removed or moved to a different configuration option
}

func (g *PGAuditConfigGenerator) addObjectAuditSection(sb *strings.Builder) {
	if g.PGAuditConf.Role == nil || *g.PGAuditConf.Role == "" {
		return
	}

	sb.WriteString("#------------------------------------------------------------------------------\n")
	sb.WriteString("# OBJECT AUDIT LOGGING\n")
	sb.WriteString("#------------------------------------------------------------------------------\n")
	sb.WriteString("\n")

	sb.WriteString("# Role for object audit logging.\n")
	sb.WriteString("# When this role or any role that it is a member of is specified in a GRANT\n")
	sb.WriteString("# statement, the operation will be audit logged.\n")
	sb.WriteString(fmt.Sprintf("pgaudit.role = '%s'\n", *g.PGAuditConf.Role))
	sb.WriteString("\n")
}

// IsEnabled checks if PGAudit should be enabled based on configuration
func (g *PGAuditConfigGenerator) IsEnabled() bool {
	// PGAudit is considered enabled if any logging is configured
	return g.PGAuditConf.Log != "" && g.PGAuditConf.Log != "none" ||
		g.PGAuditConf.LogCatalog == "on" ||
		g.PGAuditConf.LogParameter == "on" ||
		g.PGAuditConf.LogRelation == "on" ||
		g.PGAuditConf.LogClient == "on" ||
		(g.PGAuditConf.Role != nil && *g.PGAuditConf.Role != "")
}
