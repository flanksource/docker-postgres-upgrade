apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "postgres-upgrade.fullname" . }}
  labels:
    {{- include "postgres-upgrade.labels" . | nindent 4 }}
spec:
  serviceName: {{ include "postgres-upgrade.fullname" . }}
  replicas: 1
  selector:
    matchLabels:
      {{- include "postgres-upgrade.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/configmap.yaml") . | sha256sum }}
        checksum/secret: {{ include (print $.Template.BasePath "/secret.yaml") . | sha256sum }}
        {{- with .Values.podAnnotations }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
      labels:
        {{- include "postgres-upgrade.selectorLabels" . | nindent 8 }}
        {{- with .Values.podLabels }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "postgres-upgrade.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      {{- if .Values.upgradeContainer.enabled }}
      initContainers:
        - name: postgres-upgrade
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.upgradeContainer.image.registry }}/{{ .Values.upgradeContainer.image.repository }}:{{ .Values.upgradeContainer.image.tag }}"
          imagePullPolicy: {{ .Values.upgradeContainer.image.pullPolicy }}
          env:
            - name: PGDATA
              value: "/var/lib/postgresql/data/pgdata"
            - name: POSTGRES_DB
              value: {{ .Values.database.name | quote }}
            - name: POSTGRES_USER
              value: {{ .Values.database.username | quote }}
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "postgres-upgrade.secretName" . }}
                  key: postgres-password
            {{- if .Values.database.autoUpgrade }}
            - name: AUTO_UPGRADE
              value: "true"
            {{- end }}
            {{- if .Values.database.resetPassword }}
            - name: RESET_PASSWORD
              value: "true"
            {{- end }}
            - name: TARGET_VERSION
              value: {{ .Values.database.version | quote }}
          volumeMounts:
            - name: data
              mountPath: /var/lib/postgresql/data
            - name: upgrade-tmp
              mountPath: /tmp
            - name: init-script
              mountPath: /usr/local/bin/init-upgrade.sh
              subPath: init-upgrade.sh
          command: ["/bin/bash", "/usr/local/bin/init-upgrade.sh"]
      {{- end }}
      {{- if .Values.initContainers }}
        {{- toYaml .Values.initContainers | nindent 8 }}
      {{- end }}
      containers:
        - name: postgresql
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.postgresql.image.registry }}/{{ .Values.postgresql.image.repository }}:{{ .Values.postgresql.image.tag }}"
          imagePullPolicy: {{ .Values.postgresql.image.pullPolicy }}
          ports:
            - name: postgresql
              containerPort: 5432
              protocol: TCP
          env:
            - name: PGDATA
              value: "/var/lib/postgresql/data/pgdata"
            - name: POSTGRES_DB
              value: {{ .Values.database.name | quote }}
            - name: POSTGRES_USER
              value: {{ .Values.database.username | quote }}
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "postgres-upgrade.secretName" . }}
                  key: postgres-password
            # PostgreSQL configuration
            - name: POSTGRES_HOST_AUTH_METHOD
              value: "md5"
            - name: PG_VERSION
              value: {{ .Values.database.version | quote }}
            {{- if .Values.database.extensions.enabled }}
            - name: POSTGRES_EXTENSIONS
              value: {{ .Values.database.extensions.list | join "," | quote }}
            {{- end }}
            {{- if .Values.pgbouncer.enabled }}
            - name: PGBOUNCER_ENABLED
              value: "true"
            - name: PGBOUNCER_PORT
              value: {{ .Values.pgbouncer.port | quote }}
            - name: PGBOUNCER_POOL_MODE
              value: {{ .Values.pgbouncer.poolMode | quote }}
            - name: PGBOUNCER_MAX_CLIENT_CONN
              value: {{ .Values.pgbouncer.maxClientConn | quote }}
            - name: PGBOUNCER_DEFAULT_POOL_SIZE
              value: {{ .Values.pgbouncer.defaultPoolSize | quote }}
            - name: PGBOUNCER_SERVER_LIFETIME
              value: {{ .Values.pgbouncer.serverLifetime | quote }}
            - name: PGBOUNCER_SERVER_IDLE_TIMEOUT
              value: {{ .Values.pgbouncer.serverIdleTimeout | quote }}
            - name: PGBOUNCER_AUTH_TYPE
              value: {{ .Values.pgbouncer.authType | quote }}
            {{- end }}
            {{- if .Values.postgrest.enabled }}
            - name: POSTGREST_ENABLED
              value: "true"
            - name: POSTGREST_SERVER_PORT
              value: {{ .Values.postgrest.port | quote }}
            - name: POSTGREST_DB_SCHEMAS
              value: {{ .Values.postgrest.dbSchemas | quote }}
            - name: POSTGREST_DB_ANON_ROLE
              value: {{ .Values.postgrest.dbAnonRole | quote }}
            - name: POSTGREST_DB_POOL
              value: {{ .Values.postgrest.dbPool | quote }}
            - name: POSTGREST_DB_POOL_TIMEOUT
              value: {{ .Values.postgrest.dbPoolTimeout | quote }}
            - name: POSTGREST_LOG_LEVEL
              value: {{ .Values.postgrest.logLevel | quote }}
            {{- if .Values.postgrest.jwtSecret }}
            - name: POSTGREST_JWT_SECRET
              value: {{ .Values.postgrest.jwtSecret | quote }}
            {{- end }}
            {{- if .Values.postgrest.jwtAud }}
            - name: POSTGREST_JWT_AUD
              value: {{ .Values.postgrest.jwtAud | quote }}
            {{- end }}
            {{- end }}
            {{- if .Values.walg.enabled }}
            - name: WALG_ENABLED
              value: "true"
            - name: WALG_BACKUP_SCHEDULE
              value: {{ .Values.walg.backup.schedule | quote }}
            - name: WALG_BACKUP_RETAIN_COUNT
              value: {{ .Values.walg.backup.retainCount | quote }}
            - name: WALG_BACKUP_COMPRESS
              value: {{ .Values.walg.backup.compress | quote }}
            - name: WALG_INITIAL_BACKUP
              value: {{ .Values.walg.backup.initialBackup | quote }}
            {{- if .Values.walg.storage.s3.enabled }}
            - name: WALG_S3_PREFIX
              value: {{ .Values.walg.storage.s3.prefix | quote }}
            {{- if .Values.walg.storage.s3.region }}
            - name: AWS_REGION
              value: {{ .Values.walg.storage.s3.region | quote }}
            {{- end }}
            {{- if .Values.walg.storage.s3.endpoint }}
            - name: AWS_ENDPOINT
              value: {{ .Values.walg.storage.s3.endpoint | quote }}
            {{- end }}
            {{- if .Values.walg.storage.s3.accessKey }}
            - name: AWS_ACCESS_KEY_ID
              value: {{ .Values.walg.storage.s3.accessKey | quote }}
            {{- end }}
            {{- if .Values.walg.storage.s3.secretKey }}
            - name: AWS_SECRET_ACCESS_KEY
              value: {{ .Values.walg.storage.s3.secretKey | quote }}
            {{- end }}
            {{- else if .Values.walg.storage.gcs.enabled }}
            - name: WALG_GS_PREFIX
              value: {{ .Values.walg.storage.gcs.prefix | quote }}
            {{- if .Values.walg.storage.gcs.credentials }}
            - name: GOOGLE_APPLICATION_CREDENTIALS
              value: {{ .Values.walg.storage.gcs.credentials | quote }}
            {{- end }}
            {{- else if .Values.walg.storage.azure.enabled }}
            - name: WALG_AZ_PREFIX
              value: {{ .Values.walg.storage.azure.prefix | quote }}
            {{- if .Values.walg.storage.azure.accountName }}
            - name: AZURE_STORAGE_ACCOUNT
              value: {{ .Values.walg.storage.azure.accountName | quote }}
            {{- end }}
            {{- if .Values.walg.storage.azure.accountKey }}
            - name: AZURE_STORAGE_KEY
              value: {{ .Values.walg.storage.azure.accountKey | quote }}
            {{- end }}
            {{- else if .Values.walg.storage.file.enabled }}
            - name: WALG_FILE_PREFIX
              value: {{ .Values.walg.storage.file.prefix | quote }}
            {{- end }}
            {{- end }}
            {{- range .Values.env }}
            - name: {{ .name }}
              value: {{ .value | quote }}
            {{- end }}
          {{- if .Values.startupProbe.enabled }}
          startupProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - exec pg_isready -U "$POSTGRES_USER" -d "$POSTGRES_DB" -h 127.0.0.1 -p 5432
            initialDelaySeconds: {{ .Values.startupProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.startupProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.startupProbe.timeoutSeconds }}
            failureThreshold: {{ .Values.startupProbe.failureThreshold }}
            successThreshold: {{ .Values.startupProbe.successThreshold }}
          {{- end }}
          {{- if .Values.readinessProbe.enabled }}
          readinessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - exec pg_isready -U "$POSTGRES_USER" -d "$POSTGRES_DB" -h 127.0.0.1 -p 5432
            initialDelaySeconds: {{ .Values.readinessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.readinessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.readinessProbe.timeoutSeconds }}
            failureThreshold: {{ .Values.readinessProbe.failureThreshold }}
            successThreshold: {{ .Values.readinessProbe.successThreshold }}
          {{- end }}
          {{- if .Values.livenessProbe.enabled }}
          livenessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - exec pg_isready -U "$POSTGRES_USER" -d "$POSTGRES_DB" -h 127.0.0.1 -p 5432
            initialDelaySeconds: {{ .Values.livenessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.livenessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.livenessProbe.timeoutSeconds }}
            failureThreshold: {{ .Values.livenessProbe.failureThreshold }}
            successThreshold: {{ .Values.livenessProbe.successThreshold }}
          {{- end }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          volumeMounts:
            - name: data
              mountPath: /var/lib/postgresql/data
            - name: dshm
              mountPath: /dev/shm
            - name: config
              mountPath: /tmp/postgresql-config.conf
              subPath: postgresql.conf
            - name: scripts
              mountPath: /docker-entrypoint-initdb.d
            {{- range .Values.extraVolumeMounts }}
            - {{- toYaml . | nindent 14 }}
            {{- end }}
      volumes:
        - name: dshm
          emptyDir:
            medium: Memory
            sizeLimit: 1Gi
        - name: upgrade-tmp
          emptyDir:
            sizeLimit: 1Gi
        - name: init-script
          configMap:
            name: {{ include "postgres-upgrade.fullname" . }}-init-script
            defaultMode: 0755
        - name: config
          configMap:
            name: {{ include "postgres-upgrade.fullname" . }}-config
            items:
              - key: postgresql.conf
                path: postgresql.conf
        - name: scripts
          configMap:
            name: {{ include "postgres-upgrade.fullname" . }}-config
            defaultMode: 0755
            items:
              - key: 01-setup-config.sh
                path: 01-setup-config.sh
              - key: 02-init.sh
                path: 02-init.sh
        {{- range .Values.extraVolumes }}
        - {{- toYaml . | nindent 10 }}
        {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
  {{- if .Values.persistence.enabled }}
  volumeClaimTemplates:
    - metadata:
        name: data
        {{- with .Values.persistence.annotations }}
        annotations:
          {{- toYaml . | nindent 10 }}
        {{- end }}
      spec:
        accessModes:
          - {{ .Values.persistence.accessMode | quote }}
        {{- if .Values.persistence.storageClass }}
        {{- if (eq "-" .Values.persistence.storageClass) }}
        storageClassName: ""
        {{- else }}
        storageClassName: {{ .Values.persistence.storageClass | quote }}
        {{- end }}
        {{- end }}
        resources:
          requests:
            storage: {{ .Values.persistence.size | quote }}
  {{- else }}
        - name: data
          emptyDir: {}
  {{- end }}