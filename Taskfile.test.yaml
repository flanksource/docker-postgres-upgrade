version: "3"

# GitHub Actions output grouping
output:
  group:
    begin: "::group::{{.TASK}}"
    end: "::endgroup::"

vars:
  TEST_DIR: ./test
  GO_TEST_FLAGS: -v -timeout 30m

tasks:
  # Main test tasks using Go tests
  all:
    desc: Run all PostgreSQL upgrade tests
    dir: "{{.TEST_DIR}}"
    deps: [build]
    cmds:
      - |
        echo "ðŸ§ª Running all PostgreSQL upgrade tests..."
        go test {{.GO_TEST_FLAGS}} -run TestPostgresUpgrade

  upgrade-14-to-17:
    desc: Test upgrade from PostgreSQL 14 to 17
    dir: "{{.TEST_DIR}}"
    deps: [build]
    cmds:
      - |
        echo "ðŸ§ª Testing upgrade from PostgreSQL 14 to 17..."
        go test {{.GO_TEST_FLAGS}} -run "TestPostgresUpgrade/Upgrade_14_to_17"

  upgrade-15-to-17:
    desc: Test upgrade from PostgreSQL 15 to 17
    dir: "{{.TEST_DIR}}"
    deps: [build]
    cmds:
      - |
        echo "ðŸ§ª Testing upgrade from PostgreSQL 15 to 17..."
        go test {{.GO_TEST_FLAGS}} -run "TestPostgresUpgrade/Upgrade_15_to_17"

  upgrade-16-to-17:
    desc: Test upgrade from PostgreSQL 16 to 17
    dir: "{{.TEST_DIR}}"
    deps: [build]
    cmds:
      - |
        echo "ðŸ§ª Testing upgrade from PostgreSQL 16 to 17..."
        go test {{.GO_TEST_FLAGS}} -run "TestPostgresUpgrade/Upgrade_16_to_17"

  upgrade-15-to-16:
    desc: Test upgrade from PostgreSQL 15 to 16
    dir: "{{.TEST_DIR}}"
    deps: [build]
    cmds:
      - |
        echo "ðŸ§ª Testing upgrade from PostgreSQL 15 to 16..."
        go test {{.GO_TEST_FLAGS}} -run "TestPostgresUpgrade/Upgrade_15_to_16"

  # Quick test for development
  dev-test-quick:
    desc: Quick development test (14 to 17 upgrade only)
    dir: "{{.TEST_DIR}}"
    deps: [build]
    cmds:
      - |
        echo "âš¡ Running quick test..."
        go test {{.GO_TEST_FLAGS}} -run TestPostgresUpgradeQuick

  # Build task
  build:
    desc: Build the PostgreSQL upgrade Docker image
    cmds:
      - task build:build

  # Status task using Go test
  status:
    desc: Show status of volumes and images
    dir: "{{.TEST_DIR}}"
    cmds:
      - |
        echo "ðŸ“Š Checking Docker resources status..."
        go test {{.GO_TEST_FLAGS}} -run TestShowUpgradeStatus

  # Test coverage and reporting
  test-coverage:
    desc: Run tests with coverage report
    dir: "{{.TEST_DIR}}"
    deps: [build]
    cmds:
      - |
        echo "ðŸ“Š Running tests with coverage..."
        go test -coverprofile=coverage.out {{.GO_TEST_FLAGS}} ./...
        go tool cover -html=coverage.out -o coverage.html
        echo "âœ… Coverage report generated: test/coverage.html"

  test-report:
    desc: Generate test report
    dir: "{{.TEST_DIR}}"
    deps: [build]
    cmds:
      - |
        echo "ðŸ“Š Generating test report..."
        go test {{.GO_TEST_FLAGS}} -json ./... | tee test-report.json
        echo "âœ… Test report generated: test/test-report.json"

  # CI/CD specific tasks
  ci-test:
    desc: Run tests in CI environment
    dir: "{{.TEST_DIR}}"
    deps: [build]
    env:
      CI: "true"
    cmds:
      - |
        echo "ðŸ¤– Running tests in CI mode..."
        go test {{.GO_TEST_FLAGS}} -json ./... | tee test-results.json
        # Generate JUnit XML for CI systems
        go install github.com/jstemmer/go-junit-report/v2@latest
        cat test-results.json | go-junit-report -out junit.xml
        echo "âœ… Test results saved to test/junit.xml"

  # Clean task
  clean:
    desc: Clean up test resources and Docker volumes
    cmds:
      - |
        echo "ðŸ§¹ Cleaning up test resources..."
        docker volume prune -f || true
        docker system prune -f || true
        echo "âœ… Cleanup completed"

  # Help task
  help:
    desc: Show available tasks
    cmds:
      - task --list
