# Enhanced PostgreSQL Makefile
# Includes building and testing the enhanced image with s6-overlay, PgBouncer, PostgREST, and WAL-G

# Configuration
REGISTRY ?= ghcr.io/flanksource
IMAGE_NAME ?= postgres-enhanced
IMAGE_TAG ?= 17-latest
FULL_IMAGE_NAME = $(REGISTRY)/$(IMAGE_NAME):$(IMAGE_TAG)

# Docker build arguments
DOCKER_BUILD_ARGS ?= --build-arg S6_OVERLAY_VERSION=3.1.6.2 \
                     --build-arg PGBOUNCER_VERSION=1.19.0 \
                     --build-arg POSTGREST_VERSION=13.0.5 \
                     --build-arg WALG_VERSION=3.0.5

# Helm configuration
HELM_CHART_PATH = ./chart
HELM_VALUES_ENHANCED = ./chart/values-enhanced.yaml
RELEASE_NAME ?= postgres-enhanced-test
NAMESPACE ?= postgres-enhanced

# Test configuration
TEST_TIMEOUT ?= 30m
GINKGO_FOCUS ?= "Enhanced PostgreSQL"

.PHONY: help
help: ## Show this help message
	@echo "Enhanced PostgreSQL Makefile"
	@echo "============================="
	@echo ""
	@echo "Available targets:"
	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | sort | awk 'BEGIN {FS = ":.*?## "}; {printf "  \033[36m%-20s\033[0m %s\n", $$1, $$2}'

.PHONY: build
build: ## Build the enhanced PostgreSQL Docker image
	@echo "üî® Building enhanced PostgreSQL image..."
	docker build -f Dockerfile.enhanced $(DOCKER_BUILD_ARGS) -t $(FULL_IMAGE_NAME) .
	@echo "‚úÖ Image built: $(FULL_IMAGE_NAME)"

.PHONY: build-no-cache
build-no-cache: ## Build the enhanced PostgreSQL Docker image without cache
	@echo "üî® Building enhanced PostgreSQL image (no cache)..."
	docker build --no-cache -f Dockerfile.enhanced $(DOCKER_BUILD_ARGS) -t $(FULL_IMAGE_NAME) .
	@echo "‚úÖ Image built: $(FULL_IMAGE_NAME)"

.PHONY: push
push: ## Push the enhanced PostgreSQL Docker image
	@echo "üì§ Pushing image to registry..."
	docker push $(FULL_IMAGE_NAME)
	@echo "‚úÖ Image pushed: $(FULL_IMAGE_NAME)"

.PHONY: pull
pull: ## Pull the enhanced PostgreSQL Docker image
	@echo "üì• Pulling image from registry..."
	docker pull $(FULL_IMAGE_NAME)
	@echo "‚úÖ Image pulled: $(FULL_IMAGE_NAME)"

.PHONY: run
run: ## Run the enhanced PostgreSQL container locally
	@echo "üöÄ Running enhanced PostgreSQL container..."
	docker run -d \
		--name postgres-enhanced-local \
		-e POSTGRES_PASSWORD=testpass \
		-e PGBOUNCER_ENABLED=true \
		-e POSTGREST_ENABLED=true \
		-e POSTGREST_JWT_SECRET=mysecret \
		-p 5432:5432 \
		-p 6432:6432 \
		-p 3000:3000 \
		-v postgres-enhanced-data:/var/lib/postgresql/data \
		$(FULL_IMAGE_NAME)
	@echo "‚úÖ Container started: postgres-enhanced-local"
	@echo "   PostgreSQL: localhost:5432"
	@echo "   PgBouncer:  localhost:6432"
	@echo "   PostgREST:  localhost:3000"

.PHONY: stop
stop: ## Stop and remove the local enhanced PostgreSQL container
	@echo "üõë Stopping enhanced PostgreSQL container..."
	-docker stop postgres-enhanced-local
	-docker rm postgres-enhanced-local
	@echo "‚úÖ Container stopped and removed"

.PHONY: logs
logs: ## Show logs from the local enhanced PostgreSQL container
	docker logs -f postgres-enhanced-local

.PHONY: shell
shell: ## Open a shell in the local enhanced PostgreSQL container
	docker exec -it postgres-enhanced-local /bin/bash

.PHONY: health
health: ## Check health of the local enhanced PostgreSQL container
	docker exec postgres-enhanced-local /usr/local/bin/healthcheck.sh

.PHONY: test-local
test-local: ## Test the local enhanced PostgreSQL container
	@echo "üß™ Testing local enhanced PostgreSQL container..."
	@echo "Testing PostgreSQL connection..."
	docker exec postgres-enhanced-local pg_isready -h localhost -p 5432 -U postgres
	@echo "Testing PgBouncer connection..."
	docker exec postgres-enhanced-local nc -z localhost 6432
	@echo "Testing PostgREST endpoint..."
	docker exec postgres-enhanced-local curl -f http://localhost:3000/
	@echo "‚úÖ Local tests passed"

.PHONY: helm-lint
helm-lint: ## Lint the enhanced Helm chart
	@echo "üîç Linting enhanced Helm chart..."
	helm lint $(HELM_CHART_PATH) --values $(HELM_VALUES_ENHANCED)
	@echo "‚úÖ Helm chart linted successfully"

.PHONY: helm-template
helm-template: ## Template the enhanced Helm chart
	@echo "üìã Templating enhanced Helm chart..."
	helm template $(RELEASE_NAME) $(HELM_CHART_PATH) \
		--values $(HELM_VALUES_ENHANCED) \
		--set pgbouncer.enabled=true \
		--set postgrest.enabled=true
	@echo "‚úÖ Helm chart templated successfully"

.PHONY: helm-install
helm-install: ## Install the enhanced Helm chart
	@echo "üì¶ Installing enhanced Helm chart..."
	kubectl create namespace $(NAMESPACE) || true
	helm upgrade --install $(RELEASE_NAME) $(HELM_CHART_PATH) \
		--values $(HELM_VALUES_ENHANCED) \
		--set postgresql.image.registry=$(REGISTRY) \
		--set postgresql.image.repository=$(IMAGE_NAME) \
		--set postgresql.image.tag=$(IMAGE_TAG) \
		--set pgbouncer.enabled=true \
		--set postgrest.enabled=true \
		--namespace $(NAMESPACE) \
		--wait --timeout=10m
	@echo "‚úÖ Helm chart installed: $(RELEASE_NAME)"

.PHONY: helm-uninstall
helm-uninstall: ## Uninstall the enhanced Helm chart
	@echo "üóëÔ∏è Uninstalling enhanced Helm chart..."
	helm uninstall $(RELEASE_NAME) --namespace $(NAMESPACE) || true
	@echo "‚úÖ Helm chart uninstalled"

.PHONY: helm-upgrade
helm-upgrade: ## Upgrade the enhanced Helm chart
	@echo "‚¨ÜÔ∏è Upgrading enhanced Helm chart..."
	helm upgrade $(RELEASE_NAME) $(HELM_CHART_PATH) \
		--values $(HELM_VALUES_ENHANCED) \
		--set postgresql.image.registry=$(REGISTRY) \
		--set postgresql.image.repository=$(IMAGE_NAME) \
		--set postgresql.image.tag=$(IMAGE_TAG) \
		--set pgbouncer.enabled=true \
		--set postgrest.enabled=true \
		--namespace $(NAMESPACE) \
		--wait --timeout=10m
	@echo "‚úÖ Helm chart upgraded: $(RELEASE_NAME)"

.PHONY: test-k8s
test-k8s: ## Run Kubernetes integration tests
	@echo "üß™ Running Kubernetes integration tests..."
	cd test && RELEASE_NAME=$(RELEASE_NAME) NAMESPACE=$(NAMESPACE) \
		ginkgo run --timeout=$(TEST_TIMEOUT) --focus="$(GINKGO_FOCUS)" -v
	@echo "‚úÖ Kubernetes tests completed"

.PHONY: test-helm
test-helm: helm-install test-k8s helm-uninstall ## Full Helm install, test, and cleanup cycle
	@echo "‚úÖ Full Helm test cycle completed"

.PHONY: clean
clean: stop ## Clean up local containers and images
	@echo "üßπ Cleaning up..."
	-docker volume rm postgres-enhanced-data
	-docker rmi $(FULL_IMAGE_NAME)
	@echo "‚úÖ Cleanup completed"

.PHONY: build-push
build-push: build push ## Build and push the enhanced image

.PHONY: dev
dev: build run test-local ## Build, run, and test locally for development

.PHONY: ci
ci: build-no-cache helm-lint test-helm push ## Complete CI pipeline

.PHONY: status
status: ## Show status of local and Kubernetes deployments
	@echo "üìä Enhanced PostgreSQL Status"
	@echo "============================="
	@echo ""
	@echo "Local Container:"
	@if docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}" | grep postgres-enhanced-local; then \
		echo "  Status: Running"; \
	else \
		echo "  Status: Not running"; \
	fi
	@echo ""
	@echo "Kubernetes Deployment:"
	@if kubectl get namespace $(NAMESPACE) >/dev/null 2>&1; then \
		echo "  Namespace: $(NAMESPACE) exists"; \
		kubectl get pods,services,pvc -n $(NAMESPACE) -l app.kubernetes.io/instance=$(RELEASE_NAME); \
	else \
		echo "  Namespace: $(NAMESPACE) does not exist"; \
	fi

.PHONY: docs
docs: ## Generate documentation
	@echo "üìö Generating documentation..."
	@echo "# Enhanced PostgreSQL Features" > ENHANCED_FEATURES.md
	@echo "" >> ENHANCED_FEATURES.md
	@echo "This enhanced PostgreSQL distribution includes:" >> ENHANCED_FEATURES.md
	@echo "- PostgreSQL 17 with popular extensions" >> ENHANCED_FEATURES.md
	@echo "- PgBouncer for connection pooling" >> ENHANCED_FEATURES.md
	@echo "- PostgREST for automatic REST API generation" >> ENHANCED_FEATURES.md
	@echo "- WAL-G for backup and recovery" >> ENHANCED_FEATURES.md
	@echo "- s6-overlay for process supervision" >> ENHANCED_FEATURES.md
	@echo "‚úÖ Documentation generated: ENHANCED_FEATURES.md"

# Development helpers
.PHONY: watch-logs
watch-logs: ## Watch logs from Kubernetes deployment
	kubectl logs -f statefulset/$(RELEASE_NAME)-enhanced -n $(NAMESPACE)

.PHONY: port-forward
port-forward: ## Port forward to Kubernetes services
	@echo "üîå Setting up port forwards..."
	@echo "PostgreSQL will be available on localhost:5432"
	@echo "PgBouncer will be available on localhost:6432"
	@echo "PostgREST will be available on localhost:3000"
	@echo "Press Ctrl+C to stop"
	kubectl port-forward svc/$(RELEASE_NAME)-postgresql 5432:5432 -n $(NAMESPACE) &
	kubectl port-forward svc/$(RELEASE_NAME)-pgbouncer 6432:6432 -n $(NAMESPACE) &
	kubectl port-forward svc/$(RELEASE_NAME)-postgrest 3000:3000 -n $(NAMESPACE) &
	wait

.PHONY: psql
psql: ## Connect to PostgreSQL via psql
	kubectl exec -it statefulset/$(RELEASE_NAME)-enhanced -n $(NAMESPACE) -- psql -U postgres -d postgres

.PHONY: backup-test
backup-test: ## Test WAL-G backup functionality (requires cloud credentials)
	@echo "üóÑÔ∏è Testing WAL-G backup..."
	kubectl exec -it statefulset/$(RELEASE_NAME)-enhanced -n $(NAMESPACE) -- /usr/local/bin/wal-g-backup.sh

# Version information
.PHONY: version
version: ## Show version information
	@echo "Enhanced PostgreSQL Build Information"
	@echo "===================================="
	@echo "Image: $(FULL_IMAGE_NAME)"
	@echo "Registry: $(REGISTRY)"
	@echo "Tag: $(IMAGE_TAG)"
	@echo "Helm Chart: $(HELM_CHART_PATH)"
	@echo "Release Name: $(RELEASE_NAME)"
	@echo "Namespace: $(NAMESPACE)"