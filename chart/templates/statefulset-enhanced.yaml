{{/*
Enhanced PostgreSQL StatefulSet with s6-overlay support
Includes PostgreSQL, PgBouncer, PostgREST, and WAL-G
*/}}
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "postgres-upgrade.fullname" . }}-enhanced
  labels:
    {{- include "postgres-upgrade.labels" . | nindent 4 }}
    app.kubernetes.io/component: postgresql
spec:
  replicas: 1
  serviceName: {{ include "postgres-upgrade.fullname" . }}-enhanced
  selector:
    matchLabels:
      {{- include "postgres-upgrade.selectorLabels" . | nindent 6 }}
      app.kubernetes.io/component: postgresql
  template:
    metadata:
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/configmap-enhanced.yaml") . | sha256sum }}
        {{- if .Values.backup.enabled }}
        checksum/backup-config: {{ include (print $.Template.BasePath "/configmap-backup.yaml") . | sha256sum }}
        {{- end }}
        {{- with .Values.podAnnotations }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
      labels:
        {{- include "postgres-upgrade.labels" . | nindent 8 }}
        app.kubernetes.io/component: postgresql
        {{- with .Values.podLabels }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "postgres-upgrade.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      containers:
        - name: postgresql-enhanced
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - name: postgresql
              containerPort: 5432
              protocol: TCP
            {{- if .Values.pgbouncer.enabled }}
            - name: pgbouncer
              containerPort: {{ .Values.pgbouncer.config.port }}
              protocol: TCP
            {{- end }}
            {{- if .Values.postgrest.enabled }}
            - name: postgrest
              containerPort: {{ .Values.postgrest.config.port }}
              protocol: TCP
            {{- end }}
          env:
            # PostgreSQL configuration
            - name: POSTGRES_DB
              value: {{ .Values.database.name | quote }}
            - name: POSTGRES_USER
              value: {{ .Values.database.username | quote }}
            {{- if .Values.database.password }}
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "postgres-upgrade.fullname" . }}-secret
                  key: postgres-password
            {{- end }}
            - name: PGDATA
              value: "/var/lib/postgresql/data"
            
            # Service control
            - name: PGBOUNCER_ENABLED
              value: {{ .Values.pgbouncer.enabled | quote }}
            - name: POSTGREST_ENABLED
              value: {{ .Values.postgrest.enabled | quote }}
            - name: WALG_ENABLED
              value: {{ .Values.backup.enabled | quote }}
            
            # PostgreSQL extensions
            - name: INIT_EXTENSIONS
              value: {{ .Values.database.extensions.list | join "," | quote }}
            
            {{- if .Values.pgbouncer.enabled }}
            # PgBouncer configuration
            - name: PGBOUNCER_PORT
              value: {{ .Values.pgbouncer.config.port | quote }}
            - name: PGBOUNCER_MAX_CLIENT_CONN
              value: {{ .Values.pgbouncer.config.maxClientConn | quote }}
            - name: PGBOUNCER_DEFAULT_POOL_SIZE
              value: {{ .Values.pgbouncer.config.defaultPoolSize | quote }}
            - name: PGBOUNCER_POOL_MODE
              value: {{ .Values.pgbouncer.config.poolMode | quote }}
            - name: PGBOUNCER_AUTH_TYPE
              value: {{ .Values.pgbouncer.config.authType | quote }}
            - name: PGBOUNCER_SERVER_LIFETIME
              value: {{ .Values.pgbouncer.config.serverLifetime | quote }}
            - name: PGBOUNCER_SERVER_IDLE_TIMEOUT
              value: {{ .Values.pgbouncer.config.serverIdleTimeout | quote }}
            {{- end }}
            
            {{- if .Values.postgrest.enabled }}
            # PostgREST configuration
            - name: POSTGREST_PORT
              value: {{ .Values.postgrest.config.port | quote }}
            - name: POSTGREST_DB_SCHEMA
              value: {{ .Values.postgrest.config.dbSchema | quote }}
            - name: POSTGREST_DB_ANON_ROLE
              value: {{ .Values.postgrest.config.dbAnonRole | quote }}
            - name: POSTGREST_DB_POOL
              value: {{ .Values.postgrest.config.dbPool | quote }}
            - name: POSTGREST_DB_POOL_TIMEOUT
              value: {{ .Values.postgrest.config.dbPoolTimeout | quote }}
            - name: POSTGREST_MAX_ROWS
              value: {{ .Values.postgrest.config.maxRows | quote }}
            {{- if .Values.postgrest.config.jwtSecret }}
            - name: POSTGREST_JWT_SECRET
              valueFrom:
                secretKeyRef:
                  name: {{ include "postgres-upgrade.fullname" . }}-secret
                  key: postgrest-jwt-secret
            {{- end }}
            - name: POSTGREST_LOG_LEVEL
              value: {{ .Values.postgrest.config.logLevel | quote }}
            {{- end }}
            
            {{- if .Values.backup.enabled }}
            # WAL-G configuration
            - name: WALG_COMPRESSION_METHOD
              value: {{ .Values.backup.walg.compressionMethod | quote }}
            {{- if .Values.backup.walg.retainCount }}
            - name: WALG_RETAIN_COUNT
              value: {{ .Values.backup.walg.retainCount | quote }}
            {{- end }}
            
            {{- if .Values.backup.walg.storage.s3.enabled }}
            - name: WALG_S3_PREFIX
              value: {{ .Values.backup.walg.storage.s3.prefix | quote }}
            - name: AWS_REGION
              value: {{ .Values.backup.walg.storage.s3.region | quote }}
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  name: {{ include "postgres-upgrade.fullname" . }}-backup-secret
                  key: aws-access-key-id
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ include "postgres-upgrade.fullname" . }}-backup-secret
                  key: aws-secret-access-key
            {{- end }}
            
            {{- if .Values.backup.walg.storage.gcs.enabled }}
            - name: WALG_GCS_PREFIX
              value: {{ .Values.backup.walg.storage.gcs.prefix | quote }}
            - name: GOOGLE_APPLICATION_CREDENTIALS
              value: "/etc/wal-g/gcs-credentials.json"
            {{- end }}
            
            {{- if .Values.backup.walg.storage.azure.enabled }}
            - name: WALG_AZURE_PREFIX
              value: {{ .Values.backup.walg.storage.azure.prefix | quote }}
            - name: AZURE_STORAGE_ACCOUNT
              valueFrom:
                secretKeyRef:
                  name: {{ include "postgres-upgrade.fullname" . }}-backup-secret
                  key: azure-storage-account
            - name: AZURE_STORAGE_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ include "postgres-upgrade.fullname" . }}-backup-secret
                  key: azure-storage-access-key
            {{- end }}
            {{- end }}
            
            # Custom environment variables
            {{- range .Values.extraEnv }}
            - name: {{ .name }}
              value: {{ .value | quote }}
            {{- end }}
          
          {{- if .Values.livenessProbe.enabled }}
          livenessProbe:
            exec:
              command:
                - /usr/local/bin/healthcheck.sh
            initialDelaySeconds: {{ .Values.livenessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.livenessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.livenessProbe.timeoutSeconds }}
            successThreshold: {{ .Values.livenessProbe.successThreshold }}
            failureThreshold: {{ .Values.livenessProbe.failureThreshold }}
          {{- end }}
          {{- if .Values.readinessProbe.enabled }}
          readinessProbe:
            exec:
              command:
                - pg_isready
                - -h
                - localhost
                - -p
                - "5432"
                - -U
                - {{ .Values.database.username | quote }}
            initialDelaySeconds: {{ .Values.readinessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.readinessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.readinessProbe.timeoutSeconds }}
            successThreshold: {{ .Values.readinessProbe.successThreshold }}
            failureThreshold: {{ .Values.readinessProbe.failureThreshold }}
          {{- end }}
          
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          
          volumeMounts:
            - name: data
              mountPath: /var/lib/postgresql/data
            - name: config
              mountPath: /etc/postgresql
              readOnly: true
            {{- if and .Values.backup.enabled .Values.backup.walg.storage.gcs.enabled }}
            - name: gcs-credentials
              mountPath: /etc/wal-g
              readOnly: true
            {{- end }}
            {{- with .Values.extraVolumeMounts }}
            {{- toYaml . | nindent 12 }}
            {{- end }}
      
      volumes:
        - name: config
          configMap:
            name: {{ include "postgres-upgrade.fullname" . }}-enhanced-config
        {{- if and .Values.backup.enabled .Values.backup.walg.storage.gcs.enabled }}
        - name: gcs-credentials
          secret:
            secretName: {{ include "postgres-upgrade.fullname" . }}-backup-secret
        {{- end }}
        {{- with .Values.extraVolumes }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
      
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
  
  volumeClaimTemplates:
    - metadata:
        name: data
        labels:
          {{- include "postgres-upgrade.labels" . | nindent 10 }}
        {{- with .Values.persistence.annotations }}
        annotations:
          {{- toYaml . | nindent 10 }}
        {{- end }}
      spec:
        accessModes:
          - {{ .Values.persistence.accessMode | quote }}
        {{- if .Values.persistence.storageClass }}
        storageClassName: {{ .Values.persistence.storageClass | quote }}
        {{- end }}
        resources:
          requests:
            storage: {{ .Values.persistence.size | quote }}