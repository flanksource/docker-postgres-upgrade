version: "3"

# GitHub Actions output grouping
output:
  group:
    begin: "::group::{{.TASK}}"
    end: "::endgroup::"

vars:
  SCHEMA_FILE: "schema/pgconfig-schema.json"
  GENERATED_FILE: "pkg/model_generated.go"
  CLI_NAME: "postgres-cli"
  GOBIN: '{{.GOBIN | default "$(go env GOPATH)/bin"}}'

tasks:
  generate-schema:
    desc: Generate JSON schema and Go structs from PostgreSQL describe-config output
    generates:
      - "{{.SCHEMA_FILE}}"
      - "{{.GENERATED_FILE}}"
    cmds:
      - echo "Generating JSON schema and Go structs from PostgreSQL configuration..."
      - go run ./cmd schema generate --output {{.SCHEMA_FILE}}
      - "echo ‚úÖ Generated schema and structs with custom pointer types"

  validate-schema:
    desc: Validate the JSON schema file
    sources:
      - "{{.SCHEMA_FILE}}"
    cmds:
      - echo "Validating JSON schema..."
      - |
        if ! command -v jsonschema >/dev/null 2>&1; then
          echo "Installing jsonschema validation tool..."
          pip3 install jsonschema[format] 2>/dev/null || pip install jsonschema[format] || echo "Warning: jsonschema tool not available"
        fi
      - |
        if command -v jsonschema >/dev/null 2>&1; then
          jsonschema --instance {{.SCHEMA_FILE}} --validator meta-schema || echo "Schema validation with jsonschema tool failed"
        else
          echo "‚ö†Ô∏è  jsonschema tool not available, skipping validation"
        fi
      - echo "‚úÖ Schema validation completed"

  cli:build:
    desc: Build the postgres-cli and install to GOBIN
    sources:
      - "cmd/**/*.go"
      - "pkg/**/*.go"
    cmds:
      - echo "Building postgres-cli..."
      - |
        GOBIN_PATH="$(go env GOPATH)/bin"
        echo "Installing to: $GOBIN_PATH/{{.CLI_NAME}}"
        go build -ldflags "-s -w" -o "$GOBIN_PATH/{{.CLI_NAME}}" ./cmd
      - echo "‚úÖ Built and installed {{.CLI_NAME}} to $(go env GOPATH)/bin"
    method: timestamp

  cli:install:
    desc: Install the CLI to GOBIN (alias for cli:build)
    cmds:
      - task: cli:build

  cli:test:
    desc: Run all CLI-related tests
    cmds:
      - echo "Running CLI tests..."
      - go test ./cmd/... ./pkg/... -v -cover
      - echo "‚úÖ CLI tests passed"

  cli:ci:
    desc: Run complete CI pipeline for CLI
    cmds:
      - task: check-dependencies
      - task: cli:build
      - task: cli:test
      - echo "üéâ CLI CI pipeline completed successfully"

  clean-generated:
    desc: Remove generated configuration files
    cmds:
      - echo "Cleaning generated configuration files..."
      - rm -f {{.GENERATED_FILE}}
      - rm -f "$(go env GOPATH)/bin/{{.CLI_NAME}}"
      - echo "‚úÖ Cleaned generated files"

  cli:fmt:
    desc: Format CLI code
    cmds:
      - echo "Formatting CLI code..."
      - go fmt ./cmd/... ./pkg/...
      - echo "‚úÖ CLI code formatted"

  cli:lint:
    desc: Lint CLI code
    cmds:
      - echo "Linting CLI code..."
      - go vet ./cmd/... ./pkg/...
      - echo "‚úÖ CLI code linting completed"

  check-dependencies:
    desc: Check that all required dependencies are available
    cmds:
      - echo "Checking configuration generation dependencies..."
      - go version
      - |
        if ! go list github.com/atombender/go-jsonschema >/dev/null 2>&1; then
          echo "‚ùå go-jsonschema not available"
          exit 1
        fi
      - |
        if ! go list github.com/xeipuuv/gojsonschema >/dev/null 2>&1; then
          echo "‚ùå gojsonschema not available"
          exit 1
        fi
      - echo "‚úÖ All dependencies available"

  help:
    desc: Show help for CLI tasks
    cmds:
      - echo "PostgreSQL CLI Build Tasks:"
      - echo "============================"
      - echo ""
      - echo "Schema Tasks:"
      - echo "  generate-schema        - Generate JSON schema and Go structs"
      - echo "  validate-schema        - Validate the JSON schema file"
      - echo ""
      - echo "CLI Build Tasks:"
      - echo "  cli:build              - Build and install CLI to GOBIN"
      - echo "  cli:install            - Install the CLI to GOBIN"
      - echo "  cli:test               - Run all CLI tests"
      - echo "  cli:ci                 - Run complete CI pipeline"
      - echo ""
      - echo "Utility Tasks:"
      - echo "  cli:fmt                - Format CLI code"
      - echo "  cli:lint               - Lint CLI code"
      - echo "  clean-generated        - Remove generated files"
      - echo "  check-dependencies     - Check required dependencies"
      - echo "  help                   - Show this help message"

