apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "postgres-upgrade.fullname" . }}-config
  labels:
    {{- include "postgres-upgrade.labels" . | nindent 4 }}
data:
  postgresql.conf: |
    # PostgreSQL configuration generated by Helm chart
    
    # Connection settings
    listen_addresses = '*'
    port = 5432
    max_connections = {{ .Values.database.config.max_connections | default "100" }}
    
    # Memory settings (auto-calculated based on resource limits)
    {{- $memoryLimitBytes := 0 }}
    {{- if .Values.resources.limits.memory }}
      {{- if hasSuffix "Gi" .Values.resources.limits.memory }}
        {{- $memoryLimitBytes = mul (trimSuffix "Gi" .Values.resources.limits.memory | int) 1073741824 }}
      {{- else if hasSuffix "Mi" .Values.resources.limits.memory }}
        {{- $memoryLimitBytes = mul (trimSuffix "Mi" .Values.resources.limits.memory | int) 1048576 }}
      {{- else if hasSuffix "G" .Values.resources.limits.memory }}
        {{- $memoryLimitBytes = mul (trimSuffix "G" .Values.resources.limits.memory | int) 1000000000 }}
      {{- else if hasSuffix "M" .Values.resources.limits.memory }}
        {{- $memoryLimitBytes = mul (trimSuffix "M" .Values.resources.limits.memory | int) 1000000 }}
      {{- end }}
    {{- end }}
    
    {{- if $memoryLimitBytes }}
      {{- $sharedBuffers := div $memoryLimitBytes 4 }}
      {{- $effectiveCacheSize := div (mul $memoryLimitBytes 3) 4 }}
      {{- $workMem := div $memoryLimitBytes 200 }}
      {{- $maintenanceWorkMem := div $memoryLimitBytes 16 }}
      {{- $walBuffers := div $memoryLimitBytes 128 }}
    shared_buffers = {{ .Values.database.config.shared_buffers | default (printf "%dB" $sharedBuffers) }}
    effective_cache_size = {{ .Values.database.config.effective_cache_size | default (printf "%dB" $effectiveCacheSize) }}
    work_mem = {{ .Values.database.config.work_mem | default (printf "%dB" $workMem) }}
    maintenance_work_mem = {{ .Values.database.config.maintenance_work_mem | default (printf "%dB" $maintenanceWorkMem) }}
    wal_buffers = {{ .Values.database.config.wal_buffers | default (printf "%dB" $walBuffers) }}
    {{- else }}
    shared_buffers = {{ .Values.database.config.shared_buffers | default "256MB" }}
    effective_cache_size = {{ .Values.database.config.effective_cache_size | default "1GB" }}
    work_mem = {{ .Values.database.config.work_mem | default "4MB" }}
    maintenance_work_mem = {{ .Values.database.config.maintenance_work_mem | default "64MB" }}
    wal_buffers = {{ .Values.database.config.wal_buffers | default "16MB" }}
    {{- end }}
    
    # WAL settings
    checkpoint_completion_target = {{ .Values.database.config.checkpoint_completion_target | default "0.9" }}
    
    # Performance settings
    random_page_cost = {{ .Values.database.config.random_page_cost | default "1.1" }}
    effective_io_concurrency = {{ .Values.database.config.effective_io_concurrency | default "200" }}
    
    # Logging
    log_destination = 'stderr'
    logging_collector = off
    log_min_messages = warning
    log_min_error_statement = error
    log_min_duration_statement = 1000
    log_connections = on
    log_disconnections = on
    log_line_prefix = '%t [%p]: [%l-1] user=%u,db=%d,app=%a,client=%h '
    
    # Authentication
    password_encryption = scram-sha-256
    
    # Custom configuration
    {{- range $key, $value := .Values.database.config.custom }}
    {{ $key }} = {{ $value | quote }}
    {{- end }}

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "postgres-upgrade.fullname" . }}-scripts
  labels:
    {{- include "postgres-upgrade.labels" . | nindent 4 }}
data:
  01-init.sh: |
    #!/bin/bash
    set -e
    
    echo "PostgreSQL initialization script starting..."
    
    # Function to log with timestamp
    log() {
        echo "$(date '+%Y-%m-%d %H:%M:%S') [INIT] $1"
    }
    
    log "PostgreSQL version: $(postgres --version)"
    log "Data directory: $PGDATA"
    log "Target version: ${TARGET_VERSION:-latest}"
    
    # Check if this is an upgrade scenario
    if [ -f "$PGDATA/PG_VERSION" ]; then
        CURRENT_VERSION=$(cat "$PGDATA/PG_VERSION")
        log "Found existing PostgreSQL $CURRENT_VERSION installation"
        
        if [ "$AUTO_UPGRADE" = "true" ] && [ "$CURRENT_VERSION" != "${TARGET_VERSION}" ]; then
            log "Auto-upgrade enabled, will upgrade from $CURRENT_VERSION to ${TARGET_VERSION}"
            # The upgrade will be handled by the main entrypoint script
        fi
    else
        log "Fresh PostgreSQL ${TARGET_VERSION} installation"
    fi
    
    # Reset password if requested
    if [ "$RESET_PASSWORD" = "true" ]; then
        log "Password reset requested"
        psql -v ON_ERROR_STOP=1 --username "$POSTGRES_USER" --dbname "$POSTGRES_DB" <<-EOSQL
            ALTER USER $POSTGRES_USER PASSWORD '$POSTGRES_PASSWORD';
        EOSQL
        log "Password reset completed"
    fi
    
    log "Initialization script completed"